package Task2;


import org.junit.jupiter.api.Test;



import static org.junit.jupiter.api.Assertions.assertEquals;

class Worker2Test {

    Worker2 workerTask2 = new Worker2();

    int maxValue =Integer.MAX_VALUE;

    void testPrint(String test, int a, int b, int c) {

        String s = workerTask2.print(a, b, c);
        assertEquals(test, s);
    }

    /**
     * Тести заданые в задаче
     */
    @Test
    public void test0(){
        testPrint("1 1 1", 1,1, 1);
        testPrint("36 9 1", 9, 4, 36);
        testPrint("37 1 2", 9, 4, 37);
        testPrint("72 9 2", 9, 4, 72);
        testPrint("73 1 3", 9, 4, 73);

    }
    /**
     * "Масксимальные"/ "минимальные" для всего аргумента задачи, граничные аргументы функции.
     * "Соседние" значения
     */
    @Test
    public void test1(){
        //region граничные значения
        testPrint("1 1 1", 1, maxValue, 1);

        testPrint("Incorrect date", 0, maxValue, 1);
        testPrint("Incorrect date", 1, maxValue + 1, 1);
        testPrint("Incorrect date", 1, maxValue, 0);

        testPrint("1 1 1", 2, maxValue, 1);
        testPrint("1 1 1", 1, maxValue - 1, 1);
        testPrint("2 1 1", 1, maxValue, 2);
        //endregion
        //region граничные значения
        testPrint("2147483647 1 1", 1, maxValue, maxValue);

        testPrint("Incorrect date", 0, maxValue, maxValue);
        testPrint("Incorrect date", 1, maxValue + 1, maxValue);
        testPrint("Incorrect date", 1, maxValue, maxValue+1);

        testPrint("2147483647 1 1", 2, maxValue, maxValue);
        testPrint("2147483647 1 2", 1, maxValue - 1, maxValue);
        testPrint("2147483646 1 1", 1, maxValue, maxValue - 1);
        //endregion
        //region граничные значения
        testPrint("1 1 1", maxValue,1, 1);

        testPrint("Incorrect date", maxValue + 1, 1, 1);
        testPrint("Incorrect date", maxValue, 0, 1);
        testPrint("Incorrect date", maxValue, 1, 0);

        testPrint("1 1 1", maxValue - 1,1, 1);
        testPrint("1 1 1", maxValue,2, 1);
        testPrint("2 2 1", maxValue,1, 2);
        //endregion
        //region граничные значения
        testPrint("2147483647 2147483647 1", maxValue, 1, maxValue);

        testPrint("Incorrect date", maxValue + 1, 1, maxValue);
        testPrint("Incorrect date", maxValue, 0, maxValue);
        testPrint("Incorrect date", maxValue , 1, maxValue + 1);

        testPrint("2147483647 1 2", maxValue - 1, 1, maxValue);
        testPrint("2147483647 1073741824 1", maxValue, 2, maxValue);
        testPrint("2147483646 2147483646 1", maxValue, 1, maxValue - 1);
        //endregion


        //region граничные значения
        testPrint("1 1 1", 1, 1,1);

        testPrint("Incorrect date", 0, 1, 1);
        testPrint("Incorrect date", 1, 0, 1);
        testPrint("Incorrect date", 1, 1, 0);

        testPrint("1 1 1", 2, 1, 1);
        testPrint("1 1 1", 1, 2, 1);
        testPrint("2 1 2", 1, 1, 2);
        //endregion

        //region граничные значения
        testPrint("2147483647 1 2147483647", 1, 1,maxValue);

        testPrint("Incorrect date", 0, 1, maxValue);
        testPrint("Incorrect date", 1, 0, maxValue);
        testPrint("Incorrect date", 1, 1, maxValue + 1);

        testPrint("2147483647 1 1073741824", 2, 1, maxValue);
        testPrint("2147483647 1 1073741824", 1, 2, maxValue);
        testPrint("2147483646 1 2147483646", 1, 1, maxValue - 1);
        //endregion

    }
    /**
     * Классс эквивалегнтности одинаковые значение этажа и подьезда
     */
    @Test
    public void test10() {
        //region граница класса эквивалентности
        testPrint("1 1 1", 1, 1, 1);


        testPrint("1 1 1", 1, 1, 1);
        testPrint("1 1 1", 1, 1, 1);

        testPrint("1 1 1", 1, 1, 1);




        //region граница класса эквивалентности
        testPrint("8 2 2", 2, 2, 8);
        testPrint("27 3 3", 3, 3, 27);

        testPrint("64 4 4", 4, 4, 64);
        testPrint("729 9 9", 9, 9, 729);

        testPrint("2136750625 215 215", 215, 46225, 2136750625);//!!!

        //endregion
        //region граница класса эквивалентности
        testPrint("4 2 2", 2, 1, 4);
        testPrint("9 3 3", 3, 1, 9);

        testPrint("2147395600 46340 46340", 46340, 1, 2147395600);
        testPrint("2147210244 46338 46338", 46338, 1, 2147210244);
        //endregion


        //region значение внутрикласса эквивалентности
        testPrint("9 3 3", 3, 1, 9);
        testPrint("16 4 4", 4, 1, 16);
        testPrint("25 5 5", 5, 1, 25);
        testPrint("36 6 6", 6, 1, 36);

        testPrint("45324 1 1", 1, 45324, 45324);
        testPrint("2234 1 1", 1, 2234, 2234);
        testPrint("3543 1 1", 1, 3543, 3543);
        testPrint("46754 1 1", 1, 46754, 46754);
        testPrint("573 1 1", 1, 573, 573);
        testPrint("66 1 1", 1, 66, 66);
        //endregion

    }
    /**
     * Взаимо простые числа
     * Класс эквивалентности когда номер квартиры совпадает с колличеством квартир на этаже и этажность дома равна 1
     * рузультат - вторе и третье значение равно 1
     */
    @Test
    public void test7() {
        //region граница класса эквивалентности
        testPrint("1 1 1", 1, 1, 1);

        testPrint("Incorrect date", 1, 0, 0);
        testPrint("2 1 1", 1, 2, 2);
        //endregion

        //region граница класса эквивалентности
        testPrint("2147483647 1 1", 1, maxValue, maxValue);

        testPrint("2147483646 1 1", 1, maxValue - 1, maxValue - 1);
        //endregion

        //region значение внутрикласса эквивалентности
        testPrint("3 1 1", 1, 3, 3);
        testPrint("4 1 1", 1, 4, 4);
        testPrint("5 1 1", 1, 5, 5);
        testPrint("6 1 1", 1, 6, 6);

        testPrint("45324 1 1", 1, 45324, 45324);
        testPrint("2234 1 1", 1, 2234, 2234);
        testPrint("3543 1 1", 1, 3543, 3543);
        testPrint("46754 1 1", 1, 46754, 46754);
        testPrint("573 1 1", 1, 573, 573);
        testPrint("66 1 1", 1, 66, 66);
        //endregion

    }

    /**
     * Класс эквивалентности когда номер совпадает с колличеством этажей в доме и колличество квартир на этаже равно 1
     * результат второе первое и второе значение равно друг другу
     */
    @Test
    public void test8() {

        //region граница класса эквивалентности
        testPrint("1 1 1", 1, 1, 1);

        testPrint("Incorrect date", 0, 1, 0);
        testPrint("2 2 1", 2, 1, 2);
        //endregion

        //region граница класса эквивалентности
        testPrint("2147483647 2147483647 1", maxValue, 1, maxValue);

        testPrint("2147483646 2147483646 1", maxValue - 1, 1, maxValue - 1);

        testPrint("Incorrect date", maxValue  + 1, 1, maxValue + 1);
        //endregion

        //region значение внутрикласса эквивалентности
        testPrint("2 2 1", 2, 1, 2);
        testPrint("3 3 1", 3, 1, 3);
        testPrint("4 4 1", 4, 1, 4);
        testPrint("5 5 1", 5, 1, 5);

        testPrint("23 23 1", 23, 1, 23);
        testPrint("498 498 1", 498, 1, 498);
        testPrint("2034 2034 1", 2034, 1, 2034);
        testPrint("23040 23040 1", 23040, 1, 23040);
        testPrint("230402 230402 1", 230402, 1, 230402);
        testPrint("1203492 1203492 1", 1203492, 1, 1203492);
        testPrint("23999898 23999898 1", 23999898, 1, 23999898);
        testPrint("239482938 239482938 1", 239482938, 1, 239482938);
        //endregion

    }


    /**
     * Класс эквивалентности
     *
     */
    @Test
    public void test9() {


        //region граница класса эквивалентности
        testPrint("1 1 1", 1, 1, 1);

        testPrint("Incorrect date", 0, 1, 0);
        testPrint("2 1 2", 1, 1, 2);
        //endregion

        //region граница класса эквивалентности
        testPrint("2147483647 1 2147483647", 1, 1, maxValue);

        testPrint("2147483646 1 2147483646", 1, 1, maxValue - 1);

        testPrint("Incorrect date", 1, 1, maxValue + 1);
        //endregion

        //region значение внутрикласса эквивалентности
        testPrint("4 1 4", 1, 1, 4);
        testPrint("3 1 3", 1, 1, 3);
        testPrint("4 1 4", 1, 1, 4);
        testPrint("5 1 5", 1, 1, 5);

        testPrint("23 1 23", 1, 1, 23);
        testPrint("498 1 498", 1, 1, 498);
        testPrint("2034 1 2034", 1, 1, 2034);
        testPrint("23040 1 23040", 1, 1, 23040);
        testPrint("230402 1 230402", 1, 1, 230402);
        testPrint("1203492 1 1203492", 1, 1, 1203492);
        testPrint("23999898 1 23999898", 1, 1, 23999898);
        testPrint("239482938 1 239482938", 1, 1, 239482938);
        //endregion

    }



    /**
     * Предметная область
     */
    @Test
    public void test3() {

        testPrint("1 1 1", 16, 6, 1);
        testPrint("96 16 1", 16, 6, 96);
        testPrint("97 1 2", 16, 6, 97);
        testPrint("192 16 2", 16, 6, 192);

        testPrint("1 1 1", 9, 8, 1);
        testPrint("72 9 1", 9, 8, 72);
        testPrint("73 1 2", 9, 8, 73);
        testPrint("144 9 2", 9, 8, 144);

        testPrint("32 8 1", 8, 4, 32);
        testPrint("33 1 2", 8, 4, 33);
        testPrint("128 8 4", 8, 4, 128);
        testPrint("87 6 3", 8, 4, 87);

        testPrint("234 5 3", 21, 5, 234);

        testPrint("345 16 3", 21, 6, 345);
        testPrint("456 13 4", 21, 6, 456);
        testPrint("865 19 7", 21, 6, 865);

    }
    /**
     * Реализация
     */
    @Test
    public void test4() {

        testPrint("Incorrect date", 0, 6, 1);
        testPrint("Incorrect date", 16, 0, 1);
        testPrint("Incorrect date", 16, 6, 0);

        testPrint("1 1 1", 1, 6, 1);
        testPrint("342 6 22", 16, 1, 342);
        testPrint("11111 11 101", 111, 1, 11111);

        testPrint("125 25 1", 25, 5, 125);
        testPrint("128 16 2", 16, 4, 128);
        testPrint("300 4 2", 30, 9, 300);
        testPrint("222 1 6", 2, 22, 222);
    }

    /**
     * Случайные значения
     */
    @Test
    public void test5() {

        testPrint("42034059 6744 1", 14386, 6233, 42034059);
        testPrint("14023904 8 161", 14, 6239, 14023904);
        testPrint("123 2 1", 16, 63, 123);
        testPrint("91923482 1084 9440", 1623, 6, 91923482);
        testPrint("1234850951 768 85", 2349, 6234, 1234850951);
        testPrint("2030000000 1849 14", 2300, 63940, 2030000000);
        testPrint("406920895 17 70039", 830, 7, 406920895);
        testPrint("345004 67 26", 304, 45, 345004);
        testPrint("564 38 2", 56, 6, 564);
        testPrint("13940940 460 1", 14940, 30354, 13940940);

    }

    /**
     * Особые значения
     */
    @Test
    public void test6() {

        testPrint("43 5 3", 5, 3, 43);
        testPrint("13 1 1", 13, 13, 13);
        testPrint("123 1 1", 123, 123, 123);
        testPrint("666 5 2", 6, 66, 666);
        testPrint("99999 11111 1", 99999,9, 99999);
        testPrint("256 16 1", 128, 16, 256);
        testPrint("133 6 4", 13, 3, 133);
        testPrint("777 34 2", 77, 7, 777);
        testPrint("14661 81 1", 91, 181, 14661);
        testPrint("33333333 2096 137", 5555, 44, 33333333);
        testPrint("1999 2 1", 1787, 1643, 1999);

    }

    @Test
    public void test1_1() {

        //region здание 1 1
        testPrint("Incorrect data", 1,1,0);
        testPrint("1 1 1", 1,1,1);
        testPrint("2 1 2", 1,1,2);

        //предметная область
        testPrint("3 1 3", 1,1,3);
        testPrint("9 1 9", 1,1,9);
        testPrint("12 1 12", 1,1,12);

        // случайные значения и особые значения и реализация
        testPrint("451 1 451", 1,1,451);
        testPrint("5678 1 5678", 1,1,5678);
        testPrint("85677 1 85677", 1,1,85677);
        testPrint("245792 1 245792", 1,1,245792);
        testPrint("7040390 1 7040390", 1,1,7040390);
        testPrint("32059960 1 32059960", 1,1,32059960);
        testPrint("350695043 1 350695043", 1,1,350695043);

        testPrint("2147483646 1 2147483646", 1,1,2147483646);
        testPrint("2147483647 1 2147483647", 1,1,2147483647);
        testPrint("Incorrect data", 1,1,2147483647 + 1);

        //endregion
    }
    @Test
    public void test1_2() {
        //region здание 1 2
        // одинаковые значения подьезда и этажа
        testPrint("Incorrect data", 1,2,0);
        testPrint("1 1 1", 1,2,1);
        testPrint("2 1 1", 1,2,2);

        // этаж не изменяеться изменяеться подьезд
        // предметная область
        testPrint("3 1 2", 1,2,3);
        testPrint("4 1 2", 1,2,4);
        testPrint("10 1 5", 1,2,10);
        testPrint("11 1 6", 1,2,11);
        // реализация, случайные значения, другие особые значения
        testPrint("100 1 50", 1,2,100);
        testPrint("101 1 51", 1,2,101);
        testPrint("1000 1 500", 1,2,1000);
        testPrint("1001 1 501", 1,2,1001);
        testPrint("10000 1 5000", 1,2,10000);
        testPrint("10001 1 5001", 1,2,10001);
        testPrint("100000 1 50000", 1,2,100000);
        testPrint("100001 1 50001", 1,2,100001);
        testPrint("1000000 1 500000", 1,2,1000000);
        testPrint("1000001 1 500001", 1,2,1000001);
        testPrint("10000000 1 5000000", 1,2,10000000);
        testPrint("10000001 1 5000001", 1,2,10000001);
        testPrint("100000000 1 50000000", 1,2,100000000);
        testPrint("100000001 1 50000001", 1,2,100000001);
        testPrint("1000000000 1 500000000", 1,2,1000000000);
        testPrint("1000000001 1 500000001", 1,2,1000000001);

        testPrint("2147483643 1 1073741822", 1,2,2147483643);
        testPrint("2147483644 1 1073741822", 1,2,2147483644);

        testPrint("2147483645 1 1073741823", 1,2,2147483645);
        testPrint("2147483646 1 1073741823", 1,2,2147483646);

        testPrint("2147483647 1 1073741824", 1,2,2147483647);
        testPrint("Incorrect date", 1,2,maxValue + 1);

        //endregion
    }
    @Test
    public void test2_1() {

        //region
        testPrint("Incorrect data", 2,1,0);
        testPrint("1 1 1", 2,1,1);
        testPrint("4 2 2", 2,1,4);
        //endregion

        //region
        testPrint("1 1 1", 2,1,1);
        testPrint("3 1 2", 2,1,3);

        testPrint("1 1 1", 2,1,1);
        testPrint("3 1 2", 2,1,3);

        testPrint("1 1 1", 2,1,1);
        testPrint("2 2 1", 2,1,2);

        testPrint("3 1 2", 2,1,3);
        testPrint("4 2 2", 2,1,4);

        testPrint("9 1 5", 2,1,9);
        testPrint("12 2 6", 2,1,12);

        testPrint("451 1 226", 2,1,451);
        testPrint("5678 2 2839", 2,1,5678);
        testPrint("85677 1 42839", 2,1,85677);
        testPrint("245792 2 122896", 2,1,245792);
        testPrint("7040390 2 3520195", 2,1,7040390);
        testPrint("32059960 2 16029980", 2,1,32059960);
        testPrint("350695043 1 175347522", 2,1,350695043);

        testPrint("2147483643 1 1073741822", 2,1,2147483643);
        testPrint("2147483644 2 1073741822", 2,1,2147483644);

        testPrint("2147483645 1 1073741823", 2,1,2147483645);
        testPrint("2147483646 2 1073741823", 2,1,2147483646);

        testPrint("2147483647 1 1073741824", 2,1,2147483647);
        testPrint("Incorrect date", 2,1,maxValue + 1);

        //endregion

    }
    @Test
    public void test1_2147483647() {
        //region одинаковые значение этажа и подьезда
        testPrint("Incorrect date", 1,2147483647,0);
        testPrint("1 1 1", 1,2147483647,1);
        testPrint("2 1 1", 1,2147483647,2);

        //endregion

        //region разрывы между подьездами
        testPrint("Incorrect date", 1,2147483647,0);
        testPrint("1 1 1", 1,2147483647,1);
        testPrint("2 1 1", 1,2147483647,2);

        testPrint("32 1 1", 1,2147483647,32);
        testPrint("343 1 1", 1,2147483647,343);

        testPrint("4355 1 1", 1,2147483647,4355);
        testPrint("23425 1 1", 1,2147483647,23425);
        testPrint("453654 1 1", 1,2147483647,453654);
        testPrint("4345633 1 1", 1,2147483647,4345633);
        testPrint("94983983 1 1", 1,2147483647,94983983);
        testPrint("454634527 1 1", 1,2147483647,454634527);

        testPrint("2147483646 1 1", 1,2147483647,2147483646);
        testPrint("2147483647 1 1", 1,2147483647,2147483647);
        testPrint("Incorrect date", 1,2147483647,2147483647 + 1);

        //endregion


        //region разрывы между этажами

        //endregion

        //region этаж не изменяеться, изменяеться подьезд

        //endregion

        //region подьезд не изменяетья, изменяеться этаж

        //endregion
    }
    @Test
    public void test2147483647_1() {

        //region одинаковые значение этажа и подьезда
        testPrint("Incorrect data", 2147483647,1,0);
        testPrint("1 1 1", 2147483647,1,1);
        testPrint("2 2 1", 2147483647,1,2);

        testPrint("Incorrect data", 2147483647,1,2147483647 + 1);
        testPrint("Incorrect data", 2147483647,1,2147483647 + 1);
        testPrint("Incorrect data", 2147483647,1,2147483647 + 1);

        //endregion

        //region разрывы между этажами
        testPrint("1 1 1", 2147483647,1,1);
        testPrint("2 2 1", 2147483647,1,2);

        // предметная область
        testPrint("22 22 1", 2147483647,1,22);
        testPrint("23 23 1", 2147483647,1,23);

        // реализация, особые значения, случайные значения, другие особые значяения
        testPrint("445 445 1", 2147483647,1,445);
        testPrint("446 446 1", 2147483647,1,446);
        testPrint("2345 2345 1", 2147483647,1,2345);
        testPrint("2346 2346 1", 2147483647,1,2346);
        testPrint("34534 34534 1", 2147483647,1,34534);
        testPrint("34535 34535 1", 2147483647,1,34535);
        testPrint("234526 234526 1", 2147483647,1,234526);
        testPrint("234527 234527 1", 2147483647,1,234527);
        testPrint("7567568 7567568 1", 2147483647,1,7567568);
        testPrint("7567569 7567569 1", 2147483647,1,7567569);
        testPrint("45645785 45645785 1", 2147483647,1,45645785);
        testPrint("45645786 45645786 1", 2147483647,1,45645786);
        testPrint("567588856 567588856 1", 2147483647,1,567588856);
        testPrint("567588857 567588857 1", 2147483647,1,567588857);

        testPrint("2147483646 2147483646 1", 2147483646,1,2147483646);
        testPrint("2147483647 2147483647 1", 2147483647,1,2147483647);

        testPrint("Incorrect data", 2147483647,1,2147483647 + 1);

        //endregion

        //region разрывы между подьездами

        testPrint("Incorrect data", 2147483647,1,2147483647 + 1);
        testPrint("2147483647 2147483647 1", 2147483647,1,2147483647);

        testPrint("Incorrect data", 2147483647,1,2147483647 + 1);

        //endregion

        //region этаж не изменяеться, изменяеться подьезд
        testPrint("Incorrect data", 2147483647,1,2147483647 + 1);
        testPrint("1 1 1", 2147483647,1,1);
        testPrint("2 2 1", 2147483647,1,2);

        testPrint("Incorrect data", 2147483647,1,2147483647 + 1);
        //endregion

        //region подьезд не изменяетья, изменяеться этаж

        testPrint("Incorrect data", 2147483647,1,0);
        testPrint("1 1 1", 2147483647,1,1);
        testPrint("2 2 1", 2147483647,1,2);

        //предметная область
        testPrint("12 12 1", 2147483647,1,12);
        testPrint("44 44 1", 2147483647,1,44);
        testPrint("323 323 1", 2147483647,1,323);
        testPrint("445 445 1", 2147483647,1,445);

        // реализвция, случайные значения, другие особые значения
        testPrint("322 322 1", 2147483647,1,322);
        testPrint("445 445 1", 2147483647,1,445);
        testPrint("2345 2345 1", 2147483647,1,2345);
        testPrint("34534 34534 1", 2147483647,1,34534);
        testPrint("234526 234526 1", 2147483647,1,234526);
        testPrint("7567568 7567568 1", 2147483647,1,7567568);
        testPrint("45645785 45645785 1", 2147483647,1,45645785);
        testPrint("567588857 567588857 1", 2147483647,1,567588857);

        testPrint("2147483646 2147483646 1", 2147483646,1,2147483646);
        testPrint("2147483647 2147483647 1", 2147483647,1,2147483647);

        testPrint("Incorrect data", 2147483647,1,2147483647 + 1);
        //endregion
    }
    @Test
    public void test5_3() {

        //region одинаковые значение этажа и подьезда
        testPrint("Incorrect data", 5,3,0);
        testPrint("1 1 1", 5,3,1);
        testPrint("2 1 1", 5,3,2);
        testPrint("3 1 1", 5,3,3);
        testPrint("4 2 1", 5,3,4);

        testPrint("36 2 3", 5,3,36);
        testPrint("37 3 3", 5,3,37);
        testPrint("38 3 3", 5,3,38);
        testPrint("39 3 3", 5,3,39);
        testPrint("40 4 3", 5,3,40);

        testPrint("72 4 5", 5,3,72);
        testPrint("73 5 5", 5,3,73);
        testPrint("74 5 5", 5,3,74);
        testPrint("75 5 5", 5,3,75);
        testPrint("76 1 6", 5,3,76);
        //endregion

        //region разрывы между этажами

        testPrint("Incorrect data", 5,3,0);
        testPrint("1 1 1", 5,3,1);

        testPrint("3 1 1", 5,3,3);
        testPrint("4 2 1", 5,3,4);

        // предметная область
        testPrint("39 3 3", 5,3,39);
        testPrint("40 4 3", 5,3,40);

        // реализация, случайные значения, особые значения
        testPrint("120 5 8", 5,3,120);
        testPrint("121 1 9", 5,3,121);

        testPrint("312 4 21", 5,3,312);
        testPrint("313 5 21", 5,3,313);

        testPrint("3426 2 229", 5,3,3426);
        testPrint("3427 3 229", 5,3,3427);

        testPrint("99999 3 6667", 5,3,99999);
        testPrint("100000 4 6667", 5,3,100000);

        testPrint("333333333 1 22222223", 5,3,333333333);
        testPrint("333333334 2 22222223", 5,3,333333334);


        testPrint("2147483646 2 143165577", 5,3,2147483646);
        testPrint("2147483647 3 143165577", 5,3,2147483647);
        //endregion

        //region разрывы между подьездами
        testPrint("Incorrect data", 5,3,0);
        testPrint("1 1 1", 5,3,1);

        testPrint("14 5 1", 5,3,14);
        testPrint("15 5 1", 5,3,15);
        testPrint("16 1 2", 5,3,16);
        testPrint("17 1 2", 5,3,17);

        // предметная область
        testPrint("75 5 5", 5,3,75);
        testPrint("76 1 6", 5,3,76);
        testPrint("120 5 8", 5,3,120);
        testPrint("121 1 9", 5,3,121);

        // реализация, случайные значения, другие особые значения
        testPrint("945 5 63", 5,3,945);
        testPrint("946 1 64", 5,3,946);

        testPrint("9525 5 635", 5,3,9525);
        testPrint("9526 1 636", 5,3,9526);

        testPrint("8280 5 552", 5,3,8280);
        testPrint("8281 1 553", 5,3,8281);

        testPrint("150000 5 10000", 5,3,150000);
        testPrint("150001 1 10001", 5,3,150001);


        // на реализацию, случайные значения, другие особые значения

        testPrint("2147483639 5 143165576", 5,3,2147483639);
        testPrint("2147483640 5 143165576", 5,3,2147483640);
        testPrint("2147483641 1 143165577", 5,3,2147483641);
        testPrint("2147483642 1 143165577", 5,3,2147483642);

        //endregion

        //region этаж не изменяеться, изменяеться подьезд

        testPrint("Incorrect data", 5,3,0);
        testPrint("1 1 1", 5,3,1);
        testPrint("2 1 1", 5,3,2);
        testPrint("3 1 1", 5,3,3);
        testPrint("4 2 1", 5,3,4);


        // предметная область
        testPrint("16 1 2", 5,3,16);
        testPrint("17 1 2", 5,3,17);
        testPrint("18 1 2", 5,3,18);
        testPrint("122 1 9", 5,3,122);
        testPrint("123 1 9", 5,3,123);
        testPrint("121 1 9", 5,3,121);

        // реализация, случайные значения, другие особые значения
        testPrint("3436 1 230", 5,3,3436);
        testPrint("3437 1 230", 5,3,3437);
        testPrint("3438 1 230", 5,3,3438);
        testPrint("343666 1 22912", 5,3,343666);
        testPrint("343667 1 22912", 5,3,343667);
        testPrint("343668 1 22912", 5,3,343668);
        testPrint("3436666 1 229112", 5,3,3436666);
        testPrint("3436667 1 229112", 5,3,3436667);
        testPrint("3436668 1 229112", 5,3,3436668);
        testPrint("34365556 1 2291038", 5,3,34365556);
        testPrint("34365557 1 2291038", 5,3,34365557);
        testPrint("34365558 1 2291038", 5,3,34365558);


        testPrint("2147483640 5 143165576", 5,3,2147483640);
        testPrint("2147483641 1 143165577", 5,3,2147483641);
        testPrint("2147483642 1 143165577", 5,3,2147483642);
        testPrint("2147483643 1 143165577", 5,3,2147483643);
        testPrint("2147483644 2 143165577", 5,3,2147483644);


        testPrint("12 4 1", 5,3,12);
        testPrint("13 5 1", 5,3,13);
        testPrint("14 5 1", 5,3,14);
        testPrint("15 5 1", 5,3,15);
        testPrint("16 1 2", 5,3,16);

        // предметная область
        testPrint("28 5 2", 5,3,28);
        testPrint("29 5 2", 5,3,29);
        testPrint("30 5 2", 5,3,30);
        testPrint("118 5 8", 5,3,118);
        testPrint("120 5 8", 5,3,120);
        testPrint("119 5 8", 5,3,119);

        // реализация, случайные значения, другие особые значения
        testPrint("3435 5 229", 5,3,3435);
        testPrint("3434 5 229", 5,3,3434);
        testPrint("3433 5 229", 5,3,3433);
        testPrint("343665 5 22911", 5,3,343665);
        testPrint("343664 5 22911", 5,3,343664);
        testPrint("343663 5 22911", 5,3,343663);
        testPrint("3436665 5 229111", 5,3,3436665);
        testPrint("3436664 5 229111", 5,3,3436664);
        testPrint("3436663 5 229111", 5,3,3436663);
        testPrint("34365555 5 2291037", 5,3,34365555);
        testPrint("34365554 5 2291037", 5,3,34365554);
        testPrint("34365553 5 2291037", 5,3,34365553);
        testPrint("2147483640 5 143165576", 5,3,2147483640);
        testPrint("2147483639 5 143165576", 5,3,2147483639);
        testPrint("2147483638 5 143165576", 5,3,2147483638);



        testPrint("2147483626 1 143165576", 5,3,2147483626);
        testPrint("2147483625 5 143165575", 5,3,2147483625);
        testPrint("2147483624 5 143165575", 5,3,2147483624);
        testPrint("2147483623 5 143165575", 5,3,2147483623);
        testPrint("2147483622 4 143165575", 5,3,2147483622);

        testPrint("2147483637 4 143165576", 5,3,2147483637);
        testPrint("2147483638 5 143165576", 5,3,2147483638);
        testPrint("2147483639 5 143165576", 5,3,2147483639);
        testPrint("2147483640 5 143165576", 5,3,2147483640);
        testPrint("2147483641 1 143165577", 5,3,2147483641);
        //endregion

        //region подьезд не изменяетья, изменяеться этаж
        testPrint("Incorrect data", 5, 3,0);
        testPrint("1 1 1", 5, 3,1);
        testPrint("4 2 1", 5, 3,4);
        testPrint("7 3 1", 5, 3,7);
        testPrint("10 4 1", 5, 3,10);
        testPrint("13 5 1", 5, 3,13);
        testPrint("16 1 2", 5, 3,16);

        testPrint("Incorrect data", 5, 3,-1);
        testPrint("2 1 1", 5, 3,2);
        testPrint("5 2 1", 5, 3,5);
        testPrint("8 3 1", 5, 3,8);
        testPrint("11 4 1", 5, 3,11);
        testPrint("14 5 1", 5, 3,14);
        testPrint("17 1 2", 5, 3,17);

        testPrint("Incorrect data", 5, 3,-2);
        testPrint("3 1 1", 5, 3,3);
        testPrint("6 2 1", 5, 3,6);
        testPrint("9 3 1", 5, 3,9);
        testPrint("12 4 1", 5, 3,12);
        testPrint("15 5 1", 5, 3,15);
        testPrint("18 1 2", 5, 3,18);


        // предметная область
        testPrint("16 1 2", 5,3,16);
        testPrint("16 1 2", 5,3,16);
        testPrint("16 1 2", 5,3,16);
        testPrint("16 1 2", 5,3,16);
        testPrint("16 1 2", 5,3,16);

        // реализация, случайные значения, другие особые значения
        testPrint("3436 1 230", 5,3,3436);
        testPrint("3436 1 230", 5,3,3436);
        testPrint("3436 1 230", 5,3,3436);
        testPrint("3436 1 230", 5,3,3436);
        testPrint("3436 1 230", 5,3,3436);
        testPrint("3436 1 230", 5,3,3436);
        testPrint("3436 1 230", 5,3,3436);
        testPrint("3436 1 230", 5,3,3436);


        testPrint("34365555 5 2291037", 5,3,34365555);
        testPrint("34365556 1 2291038", 5,3,34365556);
        testPrint("34365557 1 2291038", 5,3,34365557);
        testPrint("34365558 1 2291038", 5,3,34365558);

        testPrint("34365559 2 2291038", 5,3,34365559);
        testPrint("34365560 2 2291038", 5,3,34365560);
        testPrint("34365561 2 2291038", 5,3,34365561);

        testPrint("34365562 3 2291038", 5,3,34365562);
        testPrint("34365563 3 2291038", 5,3,34365563);
        testPrint("34365564 3 2291038", 5,3,34365564);

        testPrint("34365565 4 2291038", 5,3,34365565);
        testPrint("34365566 4 2291038", 5,3,34365566);
        testPrint("34365567 4 2291038", 5,3,34365567);

        testPrint("34365568 5 2291038", 5,3,34365568);
        testPrint("34365569 5 2291038", 5,3,34365569);
        testPrint("34365570 5 2291038", 5,3,34365570);
        testPrint("34365571 1 2291039", 5,3,34365571);
        //endregion 179
    }
    @Test
    public void test46340_46340() {
        //region одинаковые значение этажа и подьезда
        testPrint("Incorrect data", 46340,46340,0);

        testPrint("1 1 1", 46340,46340,1);
        testPrint("2 1 1", 46340,46340,2);

        // предметная область
        testPrint("11 1 1", 46340,46340,11);
        testPrint("1123 1 1", 46340,46340,1123);
        testPrint("12344 1 1", 46340,46340,12344);
        testPrint("4526 1 1", 46340,46340,4526);
        testPrint("563 1 1", 46340,46340,563);

        // реализация, случайные значения, другие особые значения
        testPrint("234 1 1", 46340,46340,234);
        testPrint("3453 1 1", 46340,46340,3453);
        testPrint("33456 1 1", 46340,46340,33456);
        testPrint("1234 1 1", 46340,46340,1234);
        testPrint("777 1 1", 46340,46340,777);
        testPrint("9999 1 1", 46340,46340,9999);


        testPrint("46340 1 1", 46340,46340,46340);
        testPrint("46339 1 1", 46340,46340,46339);
        testPrint("46341 2 1", 46340,46340,46341);

        testPrint("2147441940 1 2", 46340,46340,2147441940);
        testPrint("2147441941 2 2", 46340,46340,2147441941);
        testPrint("2147441942 2 2", 46340,46340,2147441942);

        testPrint("2147483646 2 2", 46340,46340,2147483646);
        testPrint("2147483647 2 2", 46340,46340,2147483647);
        testPrint("Incorrect data", 46340,46340,2147483647 + 1);

        //endregion

        //region разрывы между этажами
        testPrint("Incorrect data", 46340,46340,0);
        testPrint("1 1 1", 46340,46340,1);

        testPrint("46339 1 1", 46340,46340,46339);
        testPrint("46340 1 1", 46340,46340,46340);
        testPrint("46341 2 1", 46340,46340,46341);
        testPrint("46342 2 1", 46340,46340,46342);


        // предметная область
        testPrint("234 1 1", 46340,46340,234);
        testPrint("15 1 1", 46340,46340,15);
        testPrint("34 1 1", 46340,46340,34);

        // реализация, случайные значения, особые значения
        testPrint("243 1 1", 46340,46340,243);
        testPrint("15234 1 1", 46340,46340,15234);
        testPrint("343423 8 1", 46340,46340,343423);
        testPrint("234 1 1", 46340,46340,234);
        testPrint("152345 4 1", 46340,46340,152345);
        testPrint("432234 10 1", 46340,46340,432234);
        testPrint("234443345 5060 1", 46340,46340,234443345);
        testPrint("13 1 1", 46340,46340,13);
        testPrint("12345 1 1", 46340,46340,12345);
        testPrint("777 1 1", 46340,46340,777);


        testPrint("2147483647 2 2", 46340,46340,2147483647);

        testPrint("2147441940 1 2", 46340,46340,2147441940);
        testPrint("2147441941 2 2", 46340,46340,2147441941);

        testPrint("2147483647 2 2", 46340,46340,2147483647);
        testPrint("Incorrect data", 46340,46340,2147483647 + 1);


        //endregion

        //region разрывы между подьездами

        testPrint("Incorrect data", 46340,46340,0);
        testPrint("1 1 1", 46340,46340,1);
        testPrint("2 1 1", 46340,46340,2);


        testPrint("2147441939 1 2", 46340,46340,2147441939);
        testPrint("2147441940 1 2", 46340,46340,2147441940);
        testPrint("2147441941 2 2", 46340,46340,2147441941);
        testPrint("2147441942 2 2", 46340,46340,2147441942);

        //endregion

        //region этаж не изменяеться, изменяеться подьезд

        testPrint("Incorrect data", 46340,46340,0);
        testPrint("1 1 1", 46340,46340,1);
        testPrint("2 1 1", 46340,46340,2);

        testPrint("46339 1 1", 46340,46340,46339);
        testPrint("46340 1 1", 46340,46340,46340);
        testPrint("46341 2 1", 46340,46340,46341);


        testPrint("Incorrect data", 46340,46340,0);
        testPrint("1 1 1", 46340,46340,1);
        testPrint("2 1 1", 46340,46340,2);


        testPrint("2147395600 46340 1", 46340,46340,2147395600);
        testPrint("2147395601 1 2", 46340,46340,2147395601);
        testPrint("2147395602 1 2", 46340,46340,2147395602);

        testPrint("2147441939 1 2", 46340,46340,2147441939);
        testPrint("2147441940 1 2", 46340,46340,2147441940);
        testPrint("2147441941 2 2", 46340,46340,2147441941);

        //endregion

        //region подьезд не изменяетья, изменяеться этаж
        testPrint("Incorrect data", 46340,46340,0);

        testPrint("1 1 1", 46340,46340,1);
        testPrint("2 1 1", 46340,46340,2);

        testPrint("46340 1 1", 46340,46340,46340);
        testPrint("46341 2 1", 46340,46340,46341);
        testPrint("46342 2 1", 46340,46340,46342);

        // случайные занчения, реализация, другие особые значения
        testPrint("1 1 1", 46340,46340,1);

        testPrint("12345 1 1", 46340,46340,12345);
        testPrint("999 1 1", 46340,46340,999);
        testPrint("666 1 1", 46340,46340,666);
        testPrint("777 1 1", 46340,46340,777);
        testPrint("22323 1 1", 46340,46340,22323);
        testPrint("43232 1 1", 46340,46340,43232);
        testPrint("5345 1 1", 46340,46340,5345);
        testPrint("23454 1 1", 46340,46340,23454);
        testPrint("5345 1 1", 46340,46340,5345);


        testPrint("2147349260 46339 1", 46340,46340,2147349260);
        testPrint("2147349261 46340 1", 46340,46340,2147349261);
        testPrint("2147349262 46340 1", 46340,46340,2147349262);

        testPrint("2147395599 46340 1", 46340,46340,2147395599);
        testPrint("2147395600 46340 1", 46340,46340,2147395600);

        testPrint("2147395601 1 2", 46340,46340,2147395601);
        testPrint("2147395602 1 2", 46340,46340,2147395602);


        //endregion
    }
    @Test
    public void test9999_9999() {

        //region одинаковые значение этажа и подьезда
        testPrint("Incorrect data", 9999,9999,0);
        testPrint("1 1 1", 9999,9999,1);
        testPrint("2 1 1", 9999,9999,2);

        testPrint("9998 1 1", 9999,9999,9998);
        testPrint("9999 1 1", 9999,9999,9999);
        testPrint("10000 2 1", 9999,9999,10000);

        // на реализацию, случайные числа, другие особые значения

        testPrint("777 1 1", 9999,9999,777);
        testPrint("9999 1 1", 9999,9999,9999);
        testPrint("666 1 1", 9999,9999,666);
        testPrint("1234 1 1", 9999,9999,1234);
        testPrint("333333333 3340 4", 9999,9999,333333333);
        testPrint("343453 35 1", 9999,9999,343453);
        testPrint("345 1 1", 9999,9999,345);
        testPrint("2345 1 1", 9999,9999,2345);
        testPrint("14564 2 1", 9999,9999,14564);
        testPrint("98 1 1", 9999,9999,98);
        testPrint("93459 10 1", 9999,9999,93459);
        testPrint("1050 1 1", 9999,9999,1050);




        testPrint("2099580021 9999 21", 9999,9999,2099580021);

        testPrint("2099790000 21 22", 9999,9999,2099790000);
        testPrint("2099790001 22 22", 9999,9999,2099790001);
        testPrint("2099790002 22 22", 9999,9999,2099790002);

        testPrint("2099799998 22 22", 9999,9999,2099799998);
        testPrint("2099799999 22 22", 9999,9999,2099799999);
        testPrint("2099800000 23 22", 9999,9999,2099800000);


        //endregion

        //region разрывы между этажами

        testPrint("9999 1 1", 9999,9999,9999);
        testPrint("10000 2 1", 9999,9999,10000);

        // на реализацию, случайные числа, другие особые значения
        testPrint("499950 50 1", 9999,9999,499950);
        testPrint("499951 51 1", 9999,9999,499951);
        testPrint("999900 100 1", 9999,9999,999900);
        testPrint("999901 101 1", 9999,9999,999901);

        testPrint("2147475230 4790 22", 9999,9999,2147475230);
        testPrint("2147475231 4790 22", 9999,9999,2147475231);
        testPrint("2147475232 4791 22", 9999,9999,2147475232);
        testPrint("2147475233 4791 22", 9999,9999,2147475233);

        //endregion

        //region разрывы между подьездами

        testPrint("99980001 9999 1", 9999,9999,99980001);
        testPrint("99980002 1 2", 9999,9999,99980002);

        testPrint("499950 50 1", 9999,9999,499950);
        testPrint("499951 51 1", 9999,9999,499951);

        testPrint("2099580021 9999 21", 9999,9999,2099580021);
        testPrint("2099580022 1 22", 9999,9999,2099580022);

        //endregion

        //region этаж не изменяеться, изменяеться подьезд
        testPrint("Incorrect data", 9999,9999,0);
        testPrint("1 1 1", 9999,9999,1);
        testPrint("2 1 1", 9999,9999,2);

        testPrint("394 1 1", 9999,9999,394);
        testPrint("2039 1 1", 9999,9999,2039);

        testPrint("9998 1 1", 9999,9999,9998);
        testPrint("9999 1 1", 9999,9999,9999);
        testPrint("10000 2 1", 9999,9999,10000);

        testPrint("1999600020 9999 20", 9999,9999,1999600020);
        testPrint("1999600021 1 21", 9999,9999,1999600021);
        testPrint("1999600022 1 21", 9999,9999,1999600022);

        testPrint("2099580020 9999 21", 9999,9999,2099580020);
        testPrint("2099580021 9999 21", 9999,9999,2099580021);
        testPrint("2099580022 1 22", 9999,9999,2099580022);



        testPrint("394 1 1", 9999,9999,394);
        testPrint("2039 1 1", 9999,9999,2039);

        testPrint("9998 1 1", 9999,9999,9998);
        testPrint("9999 1 1", 9999,9999,9999);
        testPrint("10000 2 1", 9999,9999,10000);

        //endregion

        //region подьезд не изменяетья, изменяеться этаж




        //endregion
    }
    @Test
    public void test21_6() {

        //region одинаковые значение этажа и подьезда
        testPrint("Incorrect data", 21,6,0);
        testPrint("1 1 1", 21,6,1);
        testPrint("2 1 1", 21,6,2);

        testPrint("5 1 1", 21,6,5);
        testPrint("6 1 1", 21,6,6);
        testPrint("7 2 1", 21,6,7);

        // предметная область
        testPrint("133 2 2", 21,6,133);
        testPrint("135 2 2", 21,6,135);
        testPrint("661 6 6", 21,6,661);
        testPrint("665 6 6", 21,6,665);


        //на реализацию, случайные значения, особые значения
        testPrint("2646 21 21", 21,6,2646);
        testPrint("2643 21 21", 21,6,2643);
        testPrint("1062 9 9", 21,6,1062);
        testPrint("1060 9 9", 21,6,1060);



        testPrint("2645 21 21", 21,6,2645);
        testPrint("2646 21 21", 21,6,2646);
        testPrint("2647 1 22", 21,6,2647);

        testPrint("2640 20 21", 21,6,2640);
        testPrint("2641 21 21", 21,6,2641);
        testPrint("2642 21 21", 21,6,2642);

        //endregion

        //region разрывы между этажами

        testPrint("Incorrect data", 21,6,0);
        testPrint("1 1 1", 21,6,1);
        testPrint("2 1 1", 21,6,2);

        testPrint("2147483639 20 17043521", 21,6,2147483639);
        testPrint("2147483640 20 17043521", 21,6,2147483640);
        testPrint("2147483641 21 17043521", 21,6,2147483641);
        testPrint("2147483642 21 17043521", 21,6,2147483642);

        // предметная область
        testPrint("287 6 3", 21,6,287);
        testPrint("288 6 3", 21,6,288);
        testPrint("289 7 3", 21,6,289);
        testPrint("290 7 3", 21,6,290);

        testPrint("185 10 2", 21,6,185);
        testPrint("186 10 2", 21,6,186);
        testPrint("187 11 2", 21,6,187);
        testPrint("188 11 2", 21,6,188);


        // реализация, случайные значения, особые значения
        testPrint("6299 21 50", 21,6,6299);
        testPrint("6300 21 50", 21,6,6300);
        testPrint("6301 1 51", 21,6,6301);
        testPrint("6302 1 51", 21,6,6302);

        testPrint("32525 3 259", 21,6,32525);
        testPrint("32526 3 259", 21,6,32526);
        testPrint("32527 4 259", 21,6,32527);
        testPrint("32528 4 259", 21,6,32528);


        testPrint("185 10 2", 21,6,185);
        testPrint("186 10 2", 21,6,186);
        testPrint("187 11 2", 21,6,187);
        testPrint("188 11 2", 21,6,188);


        //endregion

        //region разрывы между подьездами

        testPrint("Incorrect data", 21,6,0);
        testPrint("1 1 1", 21,6,1);
        testPrint("2 1 1", 21,6,2);

        testPrint("125 21 1", 21,6,125);
        testPrint("126 21 1", 21,6,126);
        testPrint("127 1 2", 21,6,127);
        testPrint("128 1 2", 21,6,128);

        testPrint("2147483646 21 17043521", 21,6,2147483646);
        testPrint("2147483647 1 17043522", 21,6,2147483647);
        testPrint("Incorrect data", 21,6,2147483647 + 1);

        // предметная область

        testPrint("125 21 1", 21,6,125);
        testPrint("126 21 1", 21,6,126);
        testPrint("127 1 2", 21,6,127);
        testPrint("128 1 2", 21,6,128);

        testPrint("251 21 2", 21,6,251);
        testPrint("252 21 2", 21,6,252);
        testPrint("253 1 3", 21,6,253);
        testPrint("254 1 3", 21,6,254);

        testPrint("377 21 3", 21,6,377);
        testPrint("378 21 3", 21,6,378);
        testPrint("379 1 4", 21,6,379);
        testPrint("379 1 4", 21,6,379);

        // реализация, случайные значения, другие особые значения

        testPrint("126 21 1", 21,6,126);
        testPrint("127 1 2", 21,6,127);

        testPrint("12600 21 100", 21,6,12600);
        testPrint("12726 21 101", 21,6,12726);

        testPrint("993887 21 7888", 21,6,993887);
        testPrint("993888 21 7888", 21,6,993888);
        testPrint("993889 1 7889", 21,6,993889);
        testPrint("993890 1 7889", 21,6,993890);

        testPrint("97901 21 777", 21,6,97901);
        testPrint("97902 21 777", 21,6,97902);
        testPrint("97903 1 778", 21,6,97903);
        testPrint("97903 1 778", 21,6,97903);


        //endregion

        //region этаж не изменяеться, изменяеться подьезд
        testPrint("Incorrect data", 21,6,0);
        testPrint("1 1 1", 21,6,1);
        testPrint("2 1 1", 21,6,2);

        testPrint("5 1 1", 21,6,5);
        testPrint("6 1 1", 21,6,6);


        testPrint("127 1 2", 21,6,127);
        testPrint("128 1 2", 21,6,128);

        testPrint("127 1 2", 21,6,127);
        testPrint("128 1 2", 21,6,128);

        testPrint("2147483520 21 17043520", 21,6,2147483520);
        testPrint("2147483521 1 17043521", 21,6,2147483521);
        testPrint("2147483522 1 17043521", 21,6,2147483522);

        testPrint("2147483525 1 17043521", 21,6,2147483525);
        testPrint("2147483526 1 17043521", 21,6,2147483526);
        testPrint("2147483527 2 17043521", 21,6,2147483527);

        testPrint("Incorrect data", 21,6,2147483647 + 1);
        testPrint("2147483647 1 17043522", 21,6,2147483647);
        testPrint("2147483646 21 17043521", 21,6,2147483646);

        testPrint("120 20 1", 21,6,120);
        testPrint("121 21 1", 21,6,121);
        testPrint("122 21 1", 21,6,122);

        testPrint("125 21 1", 21,6,125);
        testPrint("126 21 1", 21,6,126);
        testPrint("127 1 2", 21,6,127);

        testPrint("2147483521 1 17043521", 21,6,2147483521);
        testPrint("2147483520 21 17043520", 21,6,2147483520);
        testPrint("2147483519 21 17043520", 21,6,2147483519);

        testPrint("2147483525 1 17043521", 21,6,2147483525);
        testPrint("2147483526 1 17043521", 21,6,2147483526);

        testPrint("Incorrect data", 21,6,2147483647 + 1);
        testPrint("2147483647 1 17043522", 21,6,2147483647);
        testPrint("2147483646 21 17043521", 21,6,2147483646);

        // предметная область

        testPrint("251 21 2", 21,6,251);
        testPrint("252 21 2", 21,6,252);
        testPrint("253 1 3", 21,6,253);

        testPrint("125 21 1", 21,6,125);
        testPrint("126 21 1", 21,6,126);
        testPrint("127 1 2", 21,6,127);

        // реализация, случайные значения, другие особые значения

        testPrint("630 21 5", 21,6,630);
        testPrint("631 1 6", 21,6,631);
        testPrint("632 1 6", 21,6,632);

        testPrint("637 1 6", 21,6,637);
        testPrint("632 1 6", 21,6,638);


        testPrint("2016 21 16", 21,6,2016);
        testPrint("2017 1 17", 21,6,2017);
        testPrint("2018 1 17", 21,6,2018);

        //endregion

        //region подьезд не изменяетья, изменяеться этаж


        // предметная область

        // реализация, случайные значения, другие особые значения

        //endregion
    }
    @Test
    public void test21_8() {
        testPrint("1 1 1", 21,8,1);

        //region одинаковые значение этажа и подьезда

        //endregion

        //region разрывы между этажами



        // предметная область

        // реализация, случайные значения, особые значения

        //endregion

        //region разрывы между подьездами

        // предметная область

        // реализация, случайные значения, другие особые значения


        // на реализацию, случайные значения, другие особые значения


        //endregion

        //region этаж не изменяеться, изменяеться подьезд



        // предметная область


        // реализация, случайные значения, другие особые значения


        // предметная область

        // реализация, случайные значения, другие особые значения


        //endregion

        //region подьезд не изменяетья, изменяеться этаж


        // предметная область

        // реализация, случайные значения, другие особые значения

        //endregion
    }
    @Test
    public void test23_9() {
        testPrint("1 1 1", 1,23,9);

        //region одинаковые значение этажа и подьезда

        //endregion

        //region разрывы между этажами



        // предметная область

        // реализация, случайные значения, особые значения

        //endregion

        //region разрывы между подьездами

        // предметная область

        // реализация, случайные значения, другие особые значения


        // на реализацию, случайные значения, другие особые значения


        //endregion

        //region этаж не изменяеться, изменяеться подьезд



        // предметная область


        // реализация, случайные значения, другие особые значения


        // предметная область

        // реализация, случайные значения, другие особые значения


        //endregion

        //region подьезд не изменяетья, изменяеться этаж


        // предметная область

        // реализация, случайные значения, другие особые значения

        //endregion
    }
    @Test
    public void test23_8() {
        testPrint("1 1 1", 1,23,9);

        //region одинаковые значение этажа и подьезда

        //endregion

        //region разрывы между этажами



        // предметная область

        // реализация, случайные значения, особые значения

        //endregion

        //region разрывы между подьездами

        // предметная область

        // реализация, случайные значения, другие особые значения


        // на реализацию, случайные значения, другие особые значения


        //endregion

        //region этаж не изменяеться, изменяеться подьезд



        // предметная область


        // реализация, случайные значения, другие особые значения


        // предметная область

        // реализация, случайные значения, другие особые значения


        //endregion

        //region подьезд не изменяетья, изменяеться этаж


        // предметная область

        // реализация, случайные значения, другие особые значения

        //endregion
    }
}