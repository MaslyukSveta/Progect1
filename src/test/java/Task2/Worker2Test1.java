package Task2;


import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

class Worker2Test1 {

    Worker2 workerTask2 = new Worker2();

    int maxValue =Integer.MAX_VALUE;

    void testPrint(String test, int a, int b, int c) {

        String s = workerTask2.print(a, b, c);
        assertEquals(test, s);
    }

    /**
     * Тести заданые в задаче
     */
    @Test
    public void test0(){
        testPrint("1 1 1", 1,1, 1);
        testPrint("36 9 1", 9, 4, 36);
        testPrint("37 1 2", 9, 4, 37);
        testPrint("72 9 2", 9, 4, 72);
        testPrint("73 1 3", 9, 4, 73);

    }
    /**
     * "Масксимальные"/ "минимальные" для всего аргумента задачи, граничные аргументы функции.
     * "Соседние" значения
     */
    @Test
    public void test1(){
        //region граничные значения
        testPrint("1 1 1", 1, maxValue, 1);

        testPrint("Incorrect data", 0, maxValue, 1);
        testPrint("Incorrect data", 1, maxValue + 1, 1);
        testPrint("Incorrect data", 1, maxValue, 0);

        testPrint("1 1 1", 2, maxValue, 1);
        testPrint("1 1 1", 1, maxValue - 1, 1);
        testPrint("2 1 1", 1, maxValue, 2);
        //endregion
        //region граничные значения
        testPrint("2147483647 1 1", 1, maxValue, maxValue);

        testPrint("Incorrect data", 0, maxValue, maxValue);
        testPrint("Incorrect data", 1, maxValue + 1, maxValue);
        testPrint("Incorrect data", 1, maxValue, maxValue+1);

        testPrint("2147483647 1 1", 2, maxValue, maxValue);
        testPrint("2147483647 1 2", 1, maxValue - 1, maxValue);
        testPrint("2147483646 1 1", 1, maxValue, maxValue - 1);
        //endregion
        //region граничные значения
        testPrint("1 1 1", maxValue,1, 1);

        testPrint("Incorrect data", maxValue + 1, 1, 1);
        testPrint("Incorrect data", maxValue, 0, 1);
        testPrint("Incorrect data", maxValue, 1, 0);

        testPrint("1 1 1", maxValue - 1,1, 1);
        testPrint("1 1 1", maxValue,2, 1);
        testPrint("2 2 1", maxValue,1, 2);
        //endregion
        //region граничные значения
        testPrint("2147483647 2147483647 1", maxValue, 1, maxValue);

        testPrint("Incorrect data", maxValue + 1, 1, maxValue);
        testPrint("Incorrect data", maxValue, 0, maxValue);
        testPrint("Incorrect data", maxValue , 1, maxValue + 1);

        testPrint("2147483647 1 2", maxValue - 1, 1, maxValue);
        testPrint("2147483647 1073741824 1", maxValue, 2, maxValue);
        testPrint("2147483646 2147483646 1", maxValue, 1, maxValue - 1);
        //endregion


        //region граничные значения
        testPrint("1 1 1", 1, 1,1);

        testPrint("Incorrect data", 0, 1, 1);
        testPrint("Incorrect data", 1, 0, 1);
        testPrint("Incorrect data", 1, 1, 0);

        testPrint("1 1 1", 2, 1, 1);
        testPrint("1 1 1", 1, 2, 1);
        testPrint("2 1 2", 1, 1, 2);
        //endregion

        //region граничные значения
        testPrint("2147483647 1 2147483647", 1, 1,maxValue);

        testPrint("Incorrect data", 0, 1, maxValue);
        testPrint("Incorrect data", 1, 0, maxValue);
        testPrint("Incorrect data", 1, 1, maxValue + 1);

        testPrint("2147483647 1 1073741824", 2, 1, maxValue);
        testPrint("2147483647 1 1073741824", 1, 2, maxValue);
        testPrint("2147483646 1 2147483646", 1, 1, maxValue - 1);
        //endregion

    }
    /**
     * Классс эквивалегнтности одинаковые значение этажа и подьезда
     */
    @Test
    public void test10() {
        //region граница класса эквивалентности
        testPrint("1 1 1", 1, 1, 1);


        testPrint("1 1 1", 1, 1, 1);
        testPrint("1 1 1", 1, 1, 1);

        testPrint("1 1 1", 1, 1, 1);




        //region граница класса эквивалентности
        testPrint("8 2 2", 2, 2, 8);
        testPrint("27 3 3", 3, 3, 27);

        testPrint("64 4 4", 4, 4, 64);
        testPrint("729 9 9", 9, 9, 729);

        testPrint("2136750625 215 215", 215, 46225, 2136750625);//!!!

        //endregion
        //region граница класса эквивалентности
        testPrint("4 2 2", 2, 1, 4);
        testPrint("9 3 3", 3, 1, 9);

        testPrint("2147395600 46340 46340", 46340, 1, 2147395600);
        testPrint("2147210244 46338 46338", 46338, 1, 2147210244);
        //endregion


        //region значение внутрикласса эквивалентности
        testPrint("9 3 3", 3, 1, 9);
        testPrint("16 4 4", 4, 1, 16);
        testPrint("25 5 5", 5, 1, 25);
        testPrint("36 6 6", 6, 1, 36);

        testPrint("45324 1 1", 1, 45324, 45324);
        testPrint("2234 1 1", 1, 2234, 2234);
        testPrint("3543 1 1", 1, 3543, 3543);
        testPrint("46754 1 1", 1, 46754, 46754);
        testPrint("573 1 1", 1, 573, 573);
        testPrint("66 1 1", 1, 66, 66);
        //endregion

    }
    /**
     * Взаимо простые числа
     * Класс эквивалентности когда номер квартиры совпадает с колличеством квартир на этаже и этажность дома равна 1
     * рузультат - вторе и третье значение равно 1
     */
    @Test
    public void test7() {
        //region граница класса эквивалентности
        testPrint("1 1 1", 1, 1, 1);

        testPrint("Incorrect data", 1, 0, 0);
        testPrint("2 1 1", 1, 2, 2);
        //endregion

        //region граница класса эквивалентности
        testPrint("2147483647 1 1", 1, maxValue, maxValue);

        testPrint("2147483646 1 1", 1, maxValue - 1, maxValue - 1);
        //endregion

        //region значение внутрикласса эквивалентности
        testPrint("3 1 1", 1, 3, 3);
        testPrint("4 1 1", 1, 4, 4);
        testPrint("5 1 1", 1, 5, 5);
        testPrint("6 1 1", 1, 6, 6);

        testPrint("45324 1 1", 1, 45324, 45324);
        testPrint("2234 1 1", 1, 2234, 2234);
        testPrint("3543 1 1", 1, 3543, 3543);
        testPrint("46754 1 1", 1, 46754, 46754);
        testPrint("573 1 1", 1, 573, 573);
        testPrint("66 1 1", 1, 66, 66);
        //endregion

    }





    /**
     * Предметная область
     */
    @Test
    public void test3() {

        testPrint("1 1 1", 16, 6, 1);
        testPrint("96 16 1", 16, 6, 96);
        testPrint("97 1 2", 16, 6, 97);
        testPrint("192 16 2", 16, 6, 192);

        testPrint("1 1 1", 9, 8, 1);
        testPrint("72 9 1", 9, 8, 72);
        testPrint("73 1 2", 9, 8, 73);
        testPrint("144 9 2", 9, 8, 144);

        testPrint("32 8 1", 8, 4, 32);
        testPrint("33 1 2", 8, 4, 33);
        testPrint("128 8 4", 8, 4, 128);
        testPrint("87 6 3", 8, 4, 87);

        testPrint("234 5 3", 21, 5, 234);

        testPrint("345 16 3", 21, 6, 345);
        testPrint("456 13 4", 21, 6, 456);
        testPrint("865 19 7", 21, 6, 865);

    }
    /**
     * Реализация
     */
    @Test
    public void test4() {

        testPrint("Incorrect data", 0, 6, 1);
        testPrint("Incorrect data", 16, 0, 1);
        testPrint("Incorrect data", 16, 6, 0);

        testPrint("1 1 1", 1, 6, 1);
        testPrint("342 6 22", 16, 1, 342);
        testPrint("11111 11 101", 111, 1, 11111);

        testPrint("125 25 1", 25, 5, 125);
        testPrint("128 16 2", 16, 4, 128);
        testPrint("300 4 2", 30, 9, 300);
        testPrint("222 1 6", 2, 22, 222);
    }

    /**
     * Случайные значения
     */
    @Test
    public void test5() {

        testPrint("42034059 6744 1", 14386, 6233, 42034059);
        testPrint("14023904 8 161", 14, 6239, 14023904);
        testPrint("123 2 1", 16, 63, 123);
        testPrint("91923482 1084 9440", 1623, 6, 91923482);
        testPrint("1234850951 768 85", 2349, 6234, 1234850951);
        testPrint("2030000000 1849 14", 2300, 63940, 2030000000);
        testPrint("406920895 17 70039", 830, 7, 406920895);
        testPrint("345004 67 26", 304, 45, 345004);
        testPrint("564 38 2", 56, 6, 564);
        testPrint("13940940 460 1", 14940, 30354, 13940940);

    }

    /**
     * Особые значения
     */
    @Test
    public void test6() {

        testPrint("43 5 3", 5, 3, 43);
        testPrint("13 1 1", 13, 13, 13);
        testPrint("123 1 1", 123, 123, 123);
        testPrint("666 5 2", 6, 66, 666);
        testPrint("99999 11111 1", 99999,9, 99999);
        testPrint("256 16 1", 128, 16, 256);
        testPrint("133 6 4", 13, 3, 133);
        testPrint("777 34 2", 77, 7, 777);
        testPrint("14661 81 1", 91, 181, 14661);
        testPrint("33333333 2096 137", 5555, 44, 33333333);
        testPrint("1999 2 1", 1787, 1643, 1999);

    }

    @Test
    public void test1_1() {

        //region здание 1 1
        testPrint("Incorrect data", 1,1,0);
        testPrint("1 1 1", 1,1,1);
        testPrint("2 1 2", 1,1,2);

        //предметная область
        testPrint("3 1 3", 1,1,3);
        testPrint("9 1 9", 1,1,9);
        testPrint("12 1 12", 1,1,12);

        // случайные значения и особые значения и реализация
        testPrint("451 1 451", 1,1,451);
        testPrint("5678 1 5678", 1,1,5678);
        testPrint("85677 1 85677", 1,1,85677);
        testPrint("245792 1 245792", 1,1,245792);
        testPrint("7040390 1 7040390", 1,1,7040390);
        testPrint("32059960 1 32059960", 1,1,32059960);
        testPrint("350695043 1 350695043", 1,1,350695043);

        testPrint("2147483646 1 2147483646", 1,1,2147483646);
        testPrint("2147483647 1 2147483647", 1,1,2147483647);
        testPrint("Incorrect data", 1,1,2147483647 + 1);

        //endregion
    }
    @Test
    public void test1_2() {
        //region здание 1 2
        // одинаковые значения подьезда и этажа
        testPrint("Incorrect data", 1,2,0);
        testPrint("1 1 1", 1,2,1);
        testPrint("2 1 1", 1,2,2);

        // этаж не изменяеться изменяеться подьезд
        // предметная область
        testPrint("3 1 2", 1,2,3);
        testPrint("4 1 2", 1,2,4);
        testPrint("10 1 5", 1,2,10);
        testPrint("11 1 6", 1,2,11);
        // реализация, случайные значения, другие особые значения
        testPrint("100 1 50", 1,2,100);
        testPrint("101 1 51", 1,2,101);
        testPrint("1000 1 500", 1,2,1000);
        testPrint("1001 1 501", 1,2,1001);
        testPrint("10000 1 5000", 1,2,10000);
        testPrint("10001 1 5001", 1,2,10001);
        testPrint("100000 1 50000", 1,2,100000);
        testPrint("100001 1 50001", 1,2,100001);
        testPrint("1000000 1 500000", 1,2,1000000);
        testPrint("1000001 1 500001", 1,2,1000001);
        testPrint("10000000 1 5000000", 1,2,10000000);
        testPrint("10000001 1 5000001", 1,2,10000001);
        testPrint("100000000 1 50000000", 1,2,100000000);
        testPrint("100000001 1 50000001", 1,2,100000001);
        testPrint("1000000000 1 500000000", 1,2,1000000000);
        testPrint("1000000001 1 500000001", 1,2,1000000001);

        testPrint("2147483643 1 1073741822", 1,2,2147483643);
        testPrint("2147483644 1 1073741822", 1,2,2147483644);

        testPrint("2147483645 1 1073741823", 1,2,2147483645);
        testPrint("2147483646 1 1073741823", 1,2,2147483646);

        testPrint("2147483647 1 1073741824", 1,2,2147483647);
        testPrint("Incorrect data", 1,2,maxValue + 1);

        //endregion
    }
    @Test
    public void test2_1() {

        //region
        testPrint("Incorrect data", 2,1,0);
        testPrint("1 1 1", 2,1,1);
        testPrint("4 2 2", 2,1,4);
        //endregion

        //region
        testPrint("1 1 1", 2,1,1);
        testPrint("3 1 2", 2,1,3);

        testPrint("1 1 1", 2,1,1);
        testPrint("3 1 2", 2,1,3);

        testPrint("1 1 1", 2,1,1);
        testPrint("2 2 1", 2,1,2);

        testPrint("3 1 2", 2,1,3);
        testPrint("4 2 2", 2,1,4);

        testPrint("9 1 5", 2,1,9);
        testPrint("12 2 6", 2,1,12);

        testPrint("451 1 226", 2,1,451);
        testPrint("5678 2 2839", 2,1,5678);
        testPrint("85677 1 42839", 2,1,85677);
        testPrint("245792 2 122896", 2,1,245792);
        testPrint("7040390 2 3520195", 2,1,7040390);
        testPrint("32059960 2 16029980", 2,1,32059960);
        testPrint("350695043 1 175347522", 2,1,350695043);

        testPrint("2147483643 1 1073741822", 2,1,2147483643);
        testPrint("2147483644 2 1073741822", 2,1,2147483644);

        testPrint("2147483645 1 1073741823", 2,1,2147483645);
        testPrint("2147483646 2 1073741823", 2,1,2147483646);

        testPrint("2147483647 1 1073741824", 2,1,2147483647);
        testPrint("Incorrect data", 2,1,maxValue + 1);

        //endregion

    }
    @Test
    public void test1_2147483647() {
        //region одинаковые значение этажа и подьезда
        testPrint("Incorrect data", 1,2147483647,0);
        testPrint("1 1 1", 1,2147483647,1);
        testPrint("2 1 1", 1,2147483647,2);

        //endregion

        //region разрывы между подьездами
        testPrint("Incorrect data", 1,2147483647,0);
        testPrint("1 1 1", 1,2147483647,1);
        testPrint("2 1 1", 1,2147483647,2);

        testPrint("32 1 1", 1,2147483647,32);
        testPrint("343 1 1", 1,2147483647,343);

        testPrint("4355 1 1", 1,2147483647,4355);
        testPrint("23425 1 1", 1,2147483647,23425);
        testPrint("453654 1 1", 1,2147483647,453654);
        testPrint("4345633 1 1", 1,2147483647,4345633);
        testPrint("94983983 1 1", 1,2147483647,94983983);
        testPrint("454634527 1 1", 1,2147483647,454634527);

        testPrint("2147483646 1 1", 1,2147483647,2147483646);
        testPrint("2147483647 1 1", 1,2147483647,2147483647);
        testPrint("Incorrect data", 1,2147483647,2147483647 + 1);

        //endregion


        //region разрывы между этажами

        //endregion

        //region этаж не изменяеться, изменяеться подьезд

        //endregion

        //region подьезд не изменяетья, изменяеться этаж

        //endregion
    }
    @Test
    public void test2147483647_1() {

        //region одинаковые значение этажа и подьезда
        testPrint("Incorrect data", 2147483647,1,0);
        testPrint("1 1 1", 2147483647,1,1);
        testPrint("2 2 1", 2147483647,1,2);

        testPrint("Incorrect data", 2147483647,1,2147483647 + 1);
        testPrint("Incorrect data", 2147483647,1,2147483647 + 1);
        testPrint("Incorrect data", 2147483647,1,2147483647 + 1);

        //endregion

        //region разрывы между этажами
        testPrint("1 1 1", 2147483647,1,1);
        testPrint("2 2 1", 2147483647,1,2);

        // предметная область
        testPrint("22 22 1", 2147483647,1,22);
        testPrint("23 23 1", 2147483647,1,23);

        // реализация, особые значения, случайные значения, другие особые значяения
        testPrint("445 445 1", 2147483647,1,445);
        testPrint("446 446 1", 2147483647,1,446);
        testPrint("2345 2345 1", 2147483647,1,2345);
        testPrint("2346 2346 1", 2147483647,1,2346);
        testPrint("34534 34534 1", 2147483647,1,34534);
        testPrint("34535 34535 1", 2147483647,1,34535);
        testPrint("234526 234526 1", 2147483647,1,234526);
        testPrint("234527 234527 1", 2147483647,1,234527);
        testPrint("7567568 7567568 1", 2147483647,1,7567568);
        testPrint("7567569 7567569 1", 2147483647,1,7567569);
        testPrint("45645785 45645785 1", 2147483647,1,45645785);
        testPrint("45645786 45645786 1", 2147483647,1,45645786);
        testPrint("567588856 567588856 1", 2147483647,1,567588856);
        testPrint("567588857 567588857 1", 2147483647,1,567588857);

        testPrint("2147483646 2147483646 1", 2147483646,1,2147483646);
        testPrint("2147483647 2147483647 1", 2147483647,1,2147483647);

        testPrint("Incorrect data", 2147483647,1,2147483647 + 1);

        //endregion

        //region разрывы между подьездами

        testPrint("Incorrect data", 2147483647,1,2147483647 + 1);
        testPrint("2147483647 2147483647 1", 2147483647,1,2147483647);

        testPrint("Incorrect data", 2147483647,1,2147483647 + 1);

        //endregion

        //region этаж не изменяеться, изменяеться подьезд
        testPrint("Incorrect data", 2147483647,1,2147483647 + 1);
        testPrint("1 1 1", 2147483647,1,1);
        testPrint("2 2 1", 2147483647,1,2);

        testPrint("Incorrect data", 2147483647,1,2147483647 + 1);
        //endregion

        //region подьезд не изменяетья, изменяеться этаж

        testPrint("Incorrect data", 2147483647,1,0);
        testPrint("1 1 1", 2147483647,1,1);
        testPrint("2 2 1", 2147483647,1,2);

        //предметная область
        testPrint("12 12 1", 2147483647,1,12);
        testPrint("44 44 1", 2147483647,1,44);
        testPrint("323 323 1", 2147483647,1,323);
        testPrint("445 445 1", 2147483647,1,445);

        // реализвция, случайные значения, другие особые значения
        testPrint("322 322 1", 2147483647,1,322);
        testPrint("445 445 1", 2147483647,1,445);
        testPrint("2345 2345 1", 2147483647,1,2345);
        testPrint("34534 34534 1", 2147483647,1,34534);
        testPrint("234526 234526 1", 2147483647,1,234526);
        testPrint("7567568 7567568 1", 2147483647,1,7567568);
        testPrint("45645785 45645785 1", 2147483647,1,45645785);
        testPrint("567588857 567588857 1", 2147483647,1,567588857);

        testPrint("2147483646 2147483646 1", 2147483646,1,2147483646);
        testPrint("2147483647 2147483647 1", 2147483647,1,2147483647);

        testPrint("Incorrect data", 2147483647,1,2147483647 + 1);
        //endregion
    }
    @Test
    public void test5_3() {

        //region одинаковые значение этажа и подьезда
        testPrint("Incorrect data", 5,3,0);
        testPrint("1 1 1", 5,3,1);
        testPrint("2 1 1", 5,3,2);
        testPrint("3 1 1", 5,3,3);
        testPrint("4 2 1", 5,3,4);

        testPrint("36 2 3", 5,3,36);
        testPrint("37 3 3", 5,3,37);
        testPrint("38 3 3", 5,3,38);
        testPrint("39 3 3", 5,3,39);
        testPrint("40 4 3", 5,3,40);

        testPrint("72 4 5", 5,3,72);
        testPrint("73 5 5", 5,3,73);
        testPrint("74 5 5", 5,3,74);
        testPrint("75 5 5", 5,3,75);
        testPrint("76 1 6", 5,3,76);
        //endregion

        //region разрывы между этажами

        testPrint("Incorrect data", 5,3,0);
        testPrint("1 1 1", 5,3,1);

        testPrint("3 1 1", 5,3,3);
        testPrint("4 2 1", 5,3,4);

        // предметная область
        testPrint("39 3 3", 5,3,39);
        testPrint("40 4 3", 5,3,40);

        // реализация, случайные значения, особые значения
        testPrint("120 5 8", 5,3,120);
        testPrint("121 1 9", 5,3,121);

        testPrint("312 4 21", 5,3,312);
        testPrint("313 5 21", 5,3,313);

        testPrint("3426 2 229", 5,3,3426);
        testPrint("3427 3 229", 5,3,3427);

        testPrint("99999 3 6667", 5,3,99999);
        testPrint("100000 4 6667", 5,3,100000);

        testPrint("333333333 1 22222223", 5,3,333333333);
        testPrint("333333334 2 22222223", 5,3,333333334);


        testPrint("2147483646 2 143165577", 5,3,2147483646);
        testPrint("2147483647 3 143165577", 5,3,2147483647);
        //endregion

        //region разрывы между подьездами
        testPrint("Incorrect data", 5,3,0);
        testPrint("1 1 1", 5,3,1);

        testPrint("14 5 1", 5,3,14);
        testPrint("15 5 1", 5,3,15);
        testPrint("16 1 2", 5,3,16);
        testPrint("17 1 2", 5,3,17);

        // предметная область
        testPrint("75 5 5", 5,3,75);
        testPrint("76 1 6", 5,3,76);
        testPrint("120 5 8", 5,3,120);
        testPrint("121 1 9", 5,3,121);

        // реализация, случайные значения, другие особые значения
        testPrint("945 5 63", 5,3,945);
        testPrint("946 1 64", 5,3,946);

        testPrint("9525 5 635", 5,3,9525);
        testPrint("9526 1 636", 5,3,9526);

        testPrint("8280 5 552", 5,3,8280);
        testPrint("8281 1 553", 5,3,8281);

        testPrint("150000 5 10000", 5,3,150000);
        testPrint("150001 1 10001", 5,3,150001);


        // на реализацию, случайные значения, другие особые значения

        testPrint("2147483639 5 143165576", 5,3,2147483639);
        testPrint("2147483640 5 143165576", 5,3,2147483640);
        testPrint("2147483641 1 143165577", 5,3,2147483641);
        testPrint("2147483642 1 143165577", 5,3,2147483642);

        //endregion

        //region этаж не изменяеться, изменяеться подьезд

        testPrint("Incorrect data", 5,3,0);
        testPrint("1 1 1", 5,3,1);
        testPrint("2 1 1", 5,3,2);
        testPrint("3 1 1", 5,3,3);
        testPrint("4 2 1", 5,3,4);


        // предметная область
        testPrint("16 1 2", 5,3,16);
        testPrint("17 1 2", 5,3,17);
        testPrint("18 1 2", 5,3,18);
        testPrint("122 1 9", 5,3,122);
        testPrint("123 1 9", 5,3,123);
        testPrint("121 1 9", 5,3,121);

        // реализация, случайные значения, другие особые значения
        testPrint("3436 1 230", 5,3,3436);
        testPrint("3437 1 230", 5,3,3437);
        testPrint("3438 1 230", 5,3,3438);
        testPrint("343666 1 22912", 5,3,343666);
        testPrint("343667 1 22912", 5,3,343667);
        testPrint("343668 1 22912", 5,3,343668);
        testPrint("3436666 1 229112", 5,3,3436666);
        testPrint("3436667 1 229112", 5,3,3436667);
        testPrint("3436668 1 229112", 5,3,3436668);
        testPrint("34365556 1 2291038", 5,3,34365556);
        testPrint("34365557 1 2291038", 5,3,34365557);
        testPrint("34365558 1 2291038", 5,3,34365558);


        testPrint("2147483640 5 143165576", 5,3,2147483640);
        testPrint("2147483641 1 143165577", 5,3,2147483641);
        testPrint("2147483642 1 143165577", 5,3,2147483642);
        testPrint("2147483643 1 143165577", 5,3,2147483643);
        testPrint("2147483644 2 143165577", 5,3,2147483644);


        testPrint("12 4 1", 5,3,12);
        testPrint("13 5 1", 5,3,13);
        testPrint("14 5 1", 5,3,14);
        testPrint("15 5 1", 5,3,15);
        testPrint("16 1 2", 5,3,16);

        // предметная область
        testPrint("28 5 2", 5,3,28);
        testPrint("29 5 2", 5,3,29);
        testPrint("30 5 2", 5,3,30);
        testPrint("118 5 8", 5,3,118);
        testPrint("120 5 8", 5,3,120);
        testPrint("119 5 8", 5,3,119);

        // реализация, случайные значения, другие особые значения
        testPrint("3435 5 229", 5,3,3435);
        testPrint("3434 5 229", 5,3,3434);
        testPrint("3433 5 229", 5,3,3433);
        testPrint("343665 5 22911", 5,3,343665);
        testPrint("343664 5 22911", 5,3,343664);
        testPrint("343663 5 22911", 5,3,343663);
        testPrint("3436665 5 229111", 5,3,3436665);
        testPrint("3436664 5 229111", 5,3,3436664);
        testPrint("3436663 5 229111", 5,3,3436663);
        testPrint("34365555 5 2291037", 5,3,34365555);
        testPrint("34365554 5 2291037", 5,3,34365554);
        testPrint("34365553 5 2291037", 5,3,34365553);
        testPrint("2147483640 5 143165576", 5,3,2147483640);
        testPrint("2147483639 5 143165576", 5,3,2147483639);
        testPrint("2147483638 5 143165576", 5,3,2147483638);



        testPrint("2147483626 1 143165576", 5,3,2147483626);
        testPrint("2147483625 5 143165575", 5,3,2147483625);
        testPrint("2147483624 5 143165575", 5,3,2147483624);
        testPrint("2147483623 5 143165575", 5,3,2147483623);
        testPrint("2147483622 4 143165575", 5,3,2147483622);

        testPrint("2147483637 4 143165576", 5,3,2147483637);
        testPrint("2147483638 5 143165576", 5,3,2147483638);
        testPrint("2147483639 5 143165576", 5,3,2147483639);
        testPrint("2147483640 5 143165576", 5,3,2147483640);
        testPrint("2147483641 1 143165577", 5,3,2147483641);
        //endregion

        //region подьезд не изменяетья, изменяеться этаж
        testPrint("Incorrect data", 5, 3,0);
        testPrint("1 1 1", 5, 3,1);
        testPrint("4 2 1", 5, 3,4);
        testPrint("7 3 1", 5, 3,7);
        testPrint("10 4 1", 5, 3,10);
        testPrint("13 5 1", 5, 3,13);
        testPrint("16 1 2", 5, 3,16);

        testPrint("Incorrect data", 5, 3,-1);
        testPrint("2 1 1", 5, 3,2);
        testPrint("5 2 1", 5, 3,5);
        testPrint("8 3 1", 5, 3,8);
        testPrint("11 4 1", 5, 3,11);
        testPrint("14 5 1", 5, 3,14);
        testPrint("17 1 2", 5, 3,17);

        testPrint("Incorrect data", 5, 3,-2);
        testPrint("3 1 1", 5, 3,3);
        testPrint("6 2 1", 5, 3,6);
        testPrint("9 3 1", 5, 3,9);
        testPrint("12 4 1", 5, 3,12);
        testPrint("15 5 1", 5, 3,15);
        testPrint("18 1 2", 5, 3,18);


        // предметная область
        testPrint("16 1 2", 5,3,16);
        testPrint("16 1 2", 5,3,16);
        testPrint("16 1 2", 5,3,16);
        testPrint("16 1 2", 5,3,16);
        testPrint("16 1 2", 5,3,16);

        // реализация, случайные значения, другие особые значения
        testPrint("3436 1 230", 5,3,3436);
        testPrint("3436 1 230", 5,3,3436);
        testPrint("3436 1 230", 5,3,3436);
        testPrint("3436 1 230", 5,3,3436);
        testPrint("3436 1 230", 5,3,3436);
        testPrint("3436 1 230", 5,3,3436);
        testPrint("3436 1 230", 5,3,3436);
        testPrint("3436 1 230", 5,3,3436);


        testPrint("34365555 5 2291037", 5,3,34365555);
        testPrint("34365556 1 2291038", 5,3,34365556);
        testPrint("34365557 1 2291038", 5,3,34365557);
        testPrint("34365558 1 2291038", 5,3,34365558);

        testPrint("34365559 2 2291038", 5,3,34365559);
        testPrint("34365560 2 2291038", 5,3,34365560);
        testPrint("34365561 2 2291038", 5,3,34365561);

        testPrint("34365562 3 2291038", 5,3,34365562);
        testPrint("34365563 3 2291038", 5,3,34365563);
        testPrint("34365564 3 2291038", 5,3,34365564);

        testPrint("34365565 4 2291038", 5,3,34365565);
        testPrint("34365566 4 2291038", 5,3,34365566);
        testPrint("34365567 4 2291038", 5,3,34365567);

        testPrint("34365568 5 2291038", 5,3,34365568);
        testPrint("34365569 5 2291038", 5,3,34365569);
        testPrint("34365570 5 2291038", 5,3,34365570);
        testPrint("34365571 1 2291039", 5,3,34365571);
        //endregion 179
    }
    @Test
    public void test46340_46340() {
        //region одинаковые значение этажа и подьезда
        testPrint("Incorrect data", 46340,46340,0);

        testPrint("1 1 1", 46340,46340,1);
        testPrint("2 1 1", 46340,46340,2);

        // предметная область
        testPrint("11 1 1", 46340,46340,11);
        testPrint("1123 1 1", 46340,46340,1123);
        testPrint("12344 1 1", 46340,46340,12344);
        testPrint("4526 1 1", 46340,46340,4526);
        testPrint("563 1 1", 46340,46340,563);

        // реализация, случайные значения, другие особые значения
        testPrint("234 1 1", 46340,46340,234);
        testPrint("3453 1 1", 46340,46340,3453);
        testPrint("33456 1 1", 46340,46340,33456);
        testPrint("1234 1 1", 46340,46340,1234);
        testPrint("777 1 1", 46340,46340,777);
        testPrint("9999 1 1", 46340,46340,9999);


        testPrint("46340 1 1", 46340,46340,46340);
        testPrint("46339 1 1", 46340,46340,46339);
        testPrint("46341 2 1", 46340,46340,46341);

        testPrint("2147441940 1 2", 46340,46340,2147441940);
        testPrint("2147441941 2 2", 46340,46340,2147441941);
        testPrint("2147441942 2 2", 46340,46340,2147441942);

        testPrint("2147483646 2 2", 46340,46340,2147483646);
        testPrint("2147483647 2 2", 46340,46340,2147483647);
        testPrint("Incorrect data", 46340,46340,2147483647 + 1);

        //endregion

        //region разрывы между этажами
        testPrint("Incorrect data", 46340,46340,0);
        testPrint("1 1 1", 46340,46340,1);

        testPrint("46339 1 1", 46340,46340,46339);
        testPrint("46340 1 1", 46340,46340,46340);
        testPrint("46341 2 1", 46340,46340,46341);
        testPrint("46342 2 1", 46340,46340,46342);


        // предметная область
        testPrint("234 1 1", 46340,46340,234);
        testPrint("15 1 1", 46340,46340,15);
        testPrint("34 1 1", 46340,46340,34);

        // реализация, случайные значения, особые значения
        testPrint("243 1 1", 46340,46340,243);
        testPrint("15234 1 1", 46340,46340,15234);
        testPrint("343423 8 1", 46340,46340,343423);
        testPrint("234 1 1", 46340,46340,234);
        testPrint("152345 4 1", 46340,46340,152345);
        testPrint("432234 10 1", 46340,46340,432234);
        testPrint("234443345 5060 1", 46340,46340,234443345);
        testPrint("13 1 1", 46340,46340,13);
        testPrint("12345 1 1", 46340,46340,12345);
        testPrint("777 1 1", 46340,46340,777);


        testPrint("2147483647 2 2", 46340,46340,2147483647);

        testPrint("2147441940 1 2", 46340,46340,2147441940);
        testPrint("2147441941 2 2", 46340,46340,2147441941);

        testPrint("2147483647 2 2", 46340,46340,2147483647);
        testPrint("Incorrect data", 46340,46340,2147483647 + 1);


        //endregion

        //region разрывы между подьездами

        testPrint("Incorrect data", 46340,46340,0);
        testPrint("1 1 1", 46340,46340,1);
        testPrint("2 1 1", 46340,46340,2);


        testPrint("2147441939 1 2", 46340,46340,2147441939);
        testPrint("2147441940 1 2", 46340,46340,2147441940);
        testPrint("2147441941 2 2", 46340,46340,2147441941);
        testPrint("2147441942 2 2", 46340,46340,2147441942);

        //endregion

        //region этаж не изменяеться, изменяеться подьезд

        testPrint("Incorrect data", 46340,46340,0);
        testPrint("1 1 1", 46340,46340,1);
        testPrint("2 1 1", 46340,46340,2);

        testPrint("46339 1 1", 46340,46340,46339);
        testPrint("46340 1 1", 46340,46340,46340);
        testPrint("46341 2 1", 46340,46340,46341);


        testPrint("Incorrect data", 46340,46340,0);
        testPrint("1 1 1", 46340,46340,1);
        testPrint("2 1 1", 46340,46340,2);


        testPrint("2147395600 46340 1", 46340,46340,2147395600);
        testPrint("2147395601 1 2", 46340,46340,2147395601);
        testPrint("2147395602 1 2", 46340,46340,2147395602);

        testPrint("2147441939 1 2", 46340,46340,2147441939);
        testPrint("2147441940 1 2", 46340,46340,2147441940);
        testPrint("2147441941 2 2", 46340,46340,2147441941);

        //endregion

        //region подьезд не изменяетья, изменяеться этаж
        testPrint("Incorrect data", 46340,46340,0);

        testPrint("1 1 1", 46340,46340,1);
        testPrint("2 1 1", 46340,46340,2);

        testPrint("46340 1 1", 46340,46340,46340);
        testPrint("46341 2 1", 46340,46340,46341);
        testPrint("46342 2 1", 46340,46340,46342);

        // случайные занчения, реализация, другие особые значения
        testPrint("1 1 1", 46340,46340,1);

        testPrint("12345 1 1", 46340,46340,12345);
        testPrint("999 1 1", 46340,46340,999);
        testPrint("666 1 1", 46340,46340,666);
        testPrint("777 1 1", 46340,46340,777);
        testPrint("22323 1 1", 46340,46340,22323);
        testPrint("43232 1 1", 46340,46340,43232);
        testPrint("5345 1 1", 46340,46340,5345);
        testPrint("23454 1 1", 46340,46340,23454);
        testPrint("5345 1 1", 46340,46340,5345);


        testPrint("2147349260 46339 1", 46340,46340,2147349260);
        testPrint("2147349261 46340 1", 46340,46340,2147349261);
        testPrint("2147349262 46340 1", 46340,46340,2147349262);

        testPrint("2147395599 46340 1", 46340,46340,2147395599);
        testPrint("2147395600 46340 1", 46340,46340,2147395600);

        testPrint("2147395601 1 2", 46340,46340,2147395601);
        testPrint("2147395602 1 2", 46340,46340,2147395602);


        //endregion
    }
    @Test
    public void test9999_9999() {

        //region одинаковые значение этажа и подьезда
        testPrint("Incorrect data", 9999,9999,0);
        testPrint("1 1 1", 9999,9999,1);
        testPrint("2 1 1", 9999,9999,2);

        testPrint("9998 1 1", 9999,9999,9998);
        testPrint("9999 1 1", 9999,9999,9999);
        testPrint("10000 2 1", 9999,9999,10000);

        // на реализацию, случайные числа, другие особые значения

        testPrint("777 1 1", 9999,9999,777);
        testPrint("9999 1 1", 9999,9999,9999);
        testPrint("666 1 1", 9999,9999,666);
        testPrint("1234 1 1", 9999,9999,1234);
        testPrint("333333333 3340 4", 9999,9999,333333333);
        testPrint("343453 35 1", 9999,9999,343453);
        testPrint("345 1 1", 9999,9999,345);
        testPrint("2345 1 1", 9999,9999,2345);
        testPrint("14564 2 1", 9999,9999,14564);
        testPrint("98 1 1", 9999,9999,98);
        testPrint("93459 10 1", 9999,9999,93459);
        testPrint("1050 1 1", 9999,9999,1050);




        testPrint("2099580021 9999 21", 9999,9999,2099580021);

        testPrint("2099790000 21 22", 9999,9999,2099790000);
        testPrint("2099790001 22 22", 9999,9999,2099790001);
        testPrint("2099790002 22 22", 9999,9999,2099790002);

        testPrint("2099799998 22 22", 9999,9999,2099799998);
        testPrint("2099799999 22 22", 9999,9999,2099799999);
        testPrint("2099800000 23 22", 9999,9999,2099800000);


        //endregion

        //region разрывы между этажами

        testPrint("9999 1 1", 9999,9999,9999);
        testPrint("10000 2 1", 9999,9999,10000);

        // на реализацию, случайные числа, другие особые значения
        testPrint("499950 50 1", 9999,9999,499950);
        testPrint("499951 51 1", 9999,9999,499951);
        testPrint("999900 100 1", 9999,9999,999900);
        testPrint("999901 101 1", 9999,9999,999901);

        testPrint("2147475230 4790 22", 9999,9999,2147475230);
        testPrint("2147475231 4790 22", 9999,9999,2147475231);
        testPrint("2147475232 4791 22", 9999,9999,2147475232);
        testPrint("2147475233 4791 22", 9999,9999,2147475233);

        //endregion

        //region разрывы между подьездами

        testPrint("99980001 9999 1", 9999,9999,99980001);
        testPrint("99980002 1 2", 9999,9999,99980002);

        testPrint("499950 50 1", 9999,9999,499950);
        testPrint("499951 51 1", 9999,9999,499951);

        testPrint("2099580021 9999 21", 9999,9999,2099580021);
        testPrint("2099580022 1 22", 9999,9999,2099580022);

        //endregion

        //region этаж не изменяеться, изменяеться подьезд
        testPrint("Incorrect data", 9999,9999,0);
        testPrint("1 1 1", 9999,9999,1);
        testPrint("2 1 1", 9999,9999,2);

        testPrint("394 1 1", 9999,9999,394);
        testPrint("2039 1 1", 9999,9999,2039);

        testPrint("9998 1 1", 9999,9999,9998);
        testPrint("9999 1 1", 9999,9999,9999);
        testPrint("10000 2 1", 9999,9999,10000);

        testPrint("1999600020 9999 20", 9999,9999,1999600020);
        testPrint("1999600021 1 21", 9999,9999,1999600021);
        testPrint("1999600022 1 21", 9999,9999,1999600022);

        testPrint("2099580020 9999 21", 9999,9999,2099580020);
        testPrint("2099580021 9999 21", 9999,9999,2099580021);
        testPrint("2099580022 1 22", 9999,9999,2099580022);



        testPrint("394 1 1", 9999,9999,394);
        testPrint("2039 1 1", 9999,9999,2039);

        testPrint("9998 1 1", 9999,9999,9998);
        testPrint("9999 1 1", 9999,9999,9999);
        testPrint("10000 2 1", 9999,9999,10000);

        //endregion

        //region подьезд не изменяетья, изменяеться этаж




        //endregion
    }
    @Test
    public void test21_6() {

        //region одинаковые значение этажа и подьезда
        testPrint("Incorrect data", 21,6,0);
        testPrint("1 1 1", 21,6,1);
        testPrint("2 1 1", 21,6,2);

        testPrint("5 1 1", 21,6,5);
        testPrint("6 1 1", 21,6,6);
        testPrint("7 2 1", 21,6,7);

        // предметная область
        testPrint("133 2 2", 21,6,133);
        testPrint("135 2 2", 21,6,135);
        testPrint("661 6 6", 21,6,661);
        testPrint("665 6 6", 21,6,665);


        //на реализацию, случайные значения, особые значения
        testPrint("2646 21 21", 21,6,2646);
        testPrint("2643 21 21", 21,6,2643);
        testPrint("1062 9 9", 21,6,1062);
        testPrint("1060 9 9", 21,6,1060);



        testPrint("2645 21 21", 21,6,2645);
        testPrint("2646 21 21", 21,6,2646);
        testPrint("2647 1 22", 21,6,2647);

        testPrint("2640 20 21", 21,6,2640);
        testPrint("2641 21 21", 21,6,2641);
        testPrint("2642 21 21", 21,6,2642);

        //endregion

        //region разрывы между этажами

        testPrint("Incorrect data", 21,6,0);
        testPrint("1 1 1", 21,6,1);
        testPrint("2 1 1", 21,6,2);

        testPrint("2147483639 20 17043521", 21,6,2147483639);
        testPrint("2147483640 20 17043521", 21,6,2147483640);
        testPrint("2147483641 21 17043521", 21,6,2147483641);
        testPrint("2147483642 21 17043521", 21,6,2147483642);

        // предметная область
        testPrint("287 6 3", 21,6,287);
        testPrint("288 6 3", 21,6,288);
        testPrint("289 7 3", 21,6,289);
        testPrint("290 7 3", 21,6,290);

        testPrint("185 10 2", 21,6,185);
        testPrint("186 10 2", 21,6,186);
        testPrint("187 11 2", 21,6,187);
        testPrint("188 11 2", 21,6,188);


        // реализация, случайные значения, особые значения
        testPrint("6299 21 50", 21,6,6299);
        testPrint("6300 21 50", 21,6,6300);
        testPrint("6301 1 51", 21,6,6301);
        testPrint("6302 1 51", 21,6,6302);

        testPrint("32525 3 259", 21,6,32525);
        testPrint("32526 3 259", 21,6,32526);
        testPrint("32527 4 259", 21,6,32527);
        testPrint("32528 4 259", 21,6,32528);


        testPrint("185 10 2", 21,6,185);
        testPrint("186 10 2", 21,6,186);
        testPrint("187 11 2", 21,6,187);
        testPrint("188 11 2", 21,6,188);


        //endregion

        //region разрывы между подьездами

        testPrint("Incorrect data", 21,6,0);
        testPrint("1 1 1", 21,6,1);
        testPrint("2 1 1", 21,6,2);

        testPrint("125 21 1", 21,6,125);
        testPrint("126 21 1", 21,6,126);
        testPrint("127 1 2", 21,6,127);
        testPrint("128 1 2", 21,6,128);

        testPrint("2147483646 21 17043521", 21,6,2147483646);
        testPrint("2147483647 1 17043522", 21,6,2147483647);
        testPrint("Incorrect data", 21,6,2147483647 + 1);

        // предметная область

        testPrint("125 21 1", 21,6,125);
        testPrint("126 21 1", 21,6,126);
        testPrint("127 1 2", 21,6,127);
        testPrint("128 1 2", 21,6,128);

        testPrint("251 21 2", 21,6,251);
        testPrint("252 21 2", 21,6,252);
        testPrint("253 1 3", 21,6,253);
        testPrint("254 1 3", 21,6,254);

        testPrint("377 21 3", 21,6,377);
        testPrint("378 21 3", 21,6,378);
        testPrint("379 1 4", 21,6,379);
        testPrint("379 1 4", 21,6,379);

        // реализация, случайные значения, другие особые значения

        testPrint("126 21 1", 21,6,126);
        testPrint("127 1 2", 21,6,127);

        testPrint("12600 21 100", 21,6,12600);
        testPrint("12726 21 101", 21,6,12726);

        testPrint("993887 21 7888", 21,6,993887);
        testPrint("993888 21 7888", 21,6,993888);
        testPrint("993889 1 7889", 21,6,993889);
        testPrint("993890 1 7889", 21,6,993890);

        testPrint("97901 21 777", 21,6,97901);
        testPrint("97902 21 777", 21,6,97902);
        testPrint("97903 1 778", 21,6,97903);
        testPrint("97903 1 778", 21,6,97903);


        //endregion

        //region этаж не изменяеться, изменяеться подьезд
        testPrint("Incorrect data", 21,6,0);
        testPrint("1 1 1", 21,6,1);
        testPrint("2 1 1", 21,6,2);

        testPrint("5 1 1", 21,6,5);
        testPrint("6 1 1", 21,6,6);


        testPrint("127 1 2", 21,6,127);
        testPrint("128 1 2", 21,6,128);

        testPrint("127 1 2", 21,6,127);
        testPrint("128 1 2", 21,6,128);

        testPrint("2147483520 21 17043520", 21,6,2147483520);
        testPrint("2147483521 1 17043521", 21,6,2147483521);
        testPrint("2147483522 1 17043521", 21,6,2147483522);

        testPrint("2147483525 1 17043521", 21,6,2147483525);
        testPrint("2147483526 1 17043521", 21,6,2147483526);
        testPrint("2147483527 2 17043521", 21,6,2147483527);

        testPrint("Incorrect data", 21,6,2147483647 + 1);
        testPrint("2147483647 1 17043522", 21,6,2147483647);
        testPrint("2147483646 21 17043521", 21,6,2147483646);

        testPrint("120 20 1", 21,6,120);
        testPrint("121 21 1", 21,6,121);
        testPrint("122 21 1", 21,6,122);

        testPrint("125 21 1", 21,6,125);
        testPrint("126 21 1", 21,6,126);
        testPrint("127 1 2", 21,6,127);

        testPrint("2147483521 1 17043521", 21,6,2147483521);
        testPrint("2147483520 21 17043520", 21,6,2147483520);
        testPrint("2147483519 21 17043520", 21,6,2147483519);

        testPrint("2147483525 1 17043521", 21,6,2147483525);
        testPrint("2147483526 1 17043521", 21,6,2147483526);

        testPrint("Incorrect data", 21,6,2147483647 + 1);
        testPrint("2147483647 1 17043522", 21,6,2147483647);
        testPrint("2147483646 21 17043521", 21,6,2147483646);

        // предметная область

        testPrint("251 21 2", 21,6,251);
        testPrint("252 21 2", 21,6,252);
        testPrint("253 1 3", 21,6,253);

        testPrint("125 21 1", 21,6,125);
        testPrint("126 21 1", 21,6,126);
        testPrint("127 1 2", 21,6,127);

        // реализация, случайные значения, другие особые значения

        testPrint("630 21 5", 21,6,630);
        testPrint("631 1 6", 21,6,631);
        testPrint("632 1 6", 21,6,632);

        testPrint("637 2 6", 21,6,637);
        testPrint("638 2 6", 21,6,638);


        testPrint("2016 21 16", 21,6,2016);

        testPrint("2017 1 17", 21,6,2017);
        testPrint("2018 1 17", 21,6,2018);
        testPrint("2021 1 17", 21,6,2021);
        testPrint("2022 1 17", 21,6,2022);

        testPrint("2023 2 17", 21,6,2023);

        //endregion

        //region подьезд не изменяетья, изменяеться этаж

        testPrint("Incorrect data", 21,6,0);
        testPrint("1 1 1", 21,6,1);
        testPrint("7 2 1", 21,6,7);

        testPrint("115 20 1", 21,6,115);
        testPrint("121 21 1", 21,6,121);

        testPrint("127 1 2", 21,6,127);

        testPrint("Incorrect data", 21,6,-1);
        testPrint("2 1 1", 21,6,2);
        testPrint("8 2 1", 21,6,8);

        testPrint("116 20 1", 21,6,116);
        testPrint("122 21 1", 21,6,122);

        testPrint("128 1 2", 21,6,128);

        testPrint("2147483647 1 17043522", 21,6,2147483647);

        testPrint("115 20 1", 21,6,115);
        testPrint("121 21 1", 21,6,121);


        testPrint("2147483526 1 17043521", 21,6,2147483526);
        testPrint("2147483527 2 17043521", 21,6,2147483527);
        testPrint("2147483528 2 17043521", 21,6,2147483528);

        testPrint("2147483520 21 17043520", 21,6,2147483520);
        testPrint("2147483521 1 17043521", 21,6,2147483521);
        testPrint("2147483522 1 17043521", 21,6,2147483522);

        testPrint("2147483640 20 17043521", 21,6,2147483640);
        testPrint("2147483646 21 17043521", 21,6,2147483646);

        testPrint("2147483647 1 17043522", 21,6,2147483647);
        testPrint("Incorrect data", 21,6,2147483647 + 1);

        // предметная область

        testPrint("1135 1 10", 21,6,1135);
        testPrint("1136 1 10", 21,6,1136);
        testPrint("130 1 2", 21,6,130);

        testPrint("634 1 6", 21,6,634);
        testPrint("505 1 5", 21,6,505);

        testPrint("379 1 4", 21,6,379);

        // реализация, случайные значения, другие особые значения

        testPrint("754 21 6", 21,6,754);
        testPrint("8313 21 66", 21,6,8313);
        testPrint("6929 21 55", 21,6,6929);

        testPrint("70433 21 559", 21,6,70433);
        testPrint("334529 21 2655", 21,6,334529);
        testPrint("277199 21 2200", 21,6,277199);

        testPrint("1241397987 21 9852365", 21,6,1241397987);
        //endregion
    }
    @Test
    public void test21_8() {
        testPrint("1 1 1", 21,8,1);

        //region одинаковые значение этажа и подьезда

        testPrint("Incorrect data", 21,8,0);

        testPrint("1 1 1", 21,8,1);
        testPrint("2 1 1", 21,8,2);

        testPrint("7 1 1", 21,8,7);
        testPrint("8 1 1", 21,8,8);

        testPrint("9 2 1", 21,8,9);


        testPrint("176 1 2", 21,8,176);

        testPrint("177 2 2", 21,8,177);
        testPrint("178 2 2", 21,8,178);

        testPrint("183 2 2", 21,8,183);
        testPrint("184 2 2", 21,8,184);

        testPrint("185 3 2", 21,8,185);


        testPrint("3353 21 20", 21,8,3353);

        testPrint("3352 20 20", 21,8,3352);
        testPrint("3351 20 20", 21,8,3351);

        testPrint("3346 20 20", 21,8,3346);
        testPrint("3345 20 20", 21,8,3345);

        testPrint("3344 19 20", 21,8,3344);



        testPrint("3529 1 22", 21,8,3529);


        testPrint("3520 20 21", 21,8,3520);

        testPrint("3521 21 21", 21,8,3521);
        testPrint("3522 21 21", 21,8,3522);

        testPrint("3527 21 21", 21,8,3527);
        testPrint("3528 21 21", 21,8,3528);

        testPrint("3529 1 22", 21,8,3529);



        testPrint("704 4 5", 21,8,704);

        testPrint("705 5 5", 21,8,705);
        testPrint("706 5 5", 21,8,706);

        testPrint("711 5 5", 21,8,711);
        testPrint("712 5 5", 21,8,712);

        testPrint("713 6 5", 21,8,713);
        //endregion

        //region разрывы между этажами

        testPrint("Incorrect data", 21,8,0);
        testPrint("1 1 1", 21,8,1);
        testPrint("2 1 1", 21,8,2);

        testPrint("8 1 1", 21,8,8);
        testPrint("9 2 1", 21,8,9);

        testPrint("16 2 1", 21,8,16);
        testPrint("17 3 1", 21,8,17);


        testPrint("2147483632 14 12782641", 21,8,2147483632);
        testPrint("2147483633 15 12782641", 21,8,2147483633);

        testPrint("2147483640 15 12782641", 21,8,2147483640);
        testPrint("2147483641 16 12782641", 21,8,2147483641);

        testPrint("2147483646 16 12782641", 21,8,2147483646);
        testPrint("2147483647 16 12782641", 21,8,2147483647);
        testPrint("Incorrect data", 21,8,2147483647 + 1);

        // предметная область

        testPrint("234 9 2", 21,8,234);
        testPrint("12 2 1", 21,8,12);

        testPrint("21 3 1", 21,8,21);
        testPrint("97 13 1", 21,8,97);

        testPrint("122 16 1", 21,8,122);
        testPrint("167 21 1", 21,8,167);

        // реализация, случайные значения, особые значения
        testPrint("224 7 2", 21,8,224);
        testPrint("225 8 2", 21,8,225);

        testPrint("16368 9 98", 21,8,16368);
        testPrint("16369 10 98", 21,8,16369);

        testPrint("166192 5 990", 21,8,166192);
        testPrint("166193 6 990", 21,8,166193);

        testPrint("334192 5 1990", 21,8,334192);
        testPrint("334193 6 1990", 21,8,334193);

        testPrint("15454192 5 91990", 21,8,15454192);
        testPrint("15454193 6 91990", 21,8,15454193);

        //endregion

        //region разрывы между подьездами
        testPrint("Incorrect data", 21,8,0);
        testPrint("1 1 1", 21,8,1);
        testPrint("2 1 1", 21,8,2);

        testPrint("168 21 1", 21,8,168);
        testPrint("168 21 1", 21,8,168);
        testPrint("169 1 2", 21,8,169);
        testPrint("170 1 2", 21,8,170);

        testPrint("2147483351 21 12782639", 21,8,2147483351);
        testPrint("2147483352 21 12782639", 21,8,2147483352);
        testPrint("2147483353 1 12782640", 21,8,2147483353);
        testPrint("2147483354 1 12782640", 21,8,2147483354);


        testPrint("2147483520 21 12782640", 21,8,2147483520);
        testPrint("2147483520 21 12782640", 21,8,2147483520);
        testPrint("2147483521 1 12782641", 21,8,2147483521);
        testPrint("2147483522 1 12782641", 21,8,2147483522);



        // предметная область
        testPrint("1007 21 6", 21,8,1007);
        testPrint("1008 21 6", 21,8,1008);
        testPrint("1009 1 7", 21,8,1009);
        testPrint("1010 1 7", 21,8,1010);

        // реализация, случайные значения, другие особые значения

        testPrint("3527 21 21", 21,8,3527);
        testPrint("3528 21 21", 21,8,3528);
        testPrint("3529 1 22", 21,8,3529);
        testPrint("3530 1 22", 21,8,3530);


        testPrint("356327 21 2121", 21,8,356327);
        testPrint("356328 21 2121", 21,8,356328);
        testPrint("356329 1 2122", 21,8,356329);
        testPrint("356330 1 2122", 21,8,356330);

        //endregion

        //region этаж не изменяеться, изменяеться подьезд

        testPrint("Incorrect data", 21,8,0);

        testPrint("1 1 1", 21,8,1);
        testPrint("2 1 1", 21,8,2);

        testPrint("7 1 1", 21,8,7);
        testPrint("8 1 1", 21,8,8);

        testPrint("9 2 1", 21,8,9);


        testPrint("168 21 1", 21,8,168);

        testPrint("169 1 2", 21,8,169);
        testPrint("170 1 2", 21,8,170);

        testPrint("175 1 2", 21,8,175);
        testPrint("176 1 2", 21,8,176);

        testPrint("177 2 2", 21,8,177);


        testPrint("2147483352 21 12782639", 21,8,2147483352);

        testPrint("2147483353 1 12782640", 21,8,2147483353);
        testPrint("2147483354 1 12782640", 21,8,2147483354);
        testPrint("2147483359 1 12782640", 21,8,2147483359);
        testPrint("2147483360 1 12782640", 21,8,2147483360);

        testPrint("2147483361 2 12782640", 21,8,2147483361);



        testPrint("2147483520 21 12782640", 21,8,2147483520);

        testPrint("2147483521 1 12782641", 21,8,2147483521);
        testPrint("2147483522 1 12782641", 21,8,2147483522);
        testPrint("2147483527 1 12782641", 21,8,2147483527);
        testPrint("2147483528 1 12782641", 21,8,2147483528);

        testPrint("2147483529 2 12782641", 21,8,2147483529);

        // предметная область

        testPrint("168 21 1", 21,8,168);

        testPrint("169 1 2", 21,8,169);
        testPrint("170 1 2", 21,8,170);

        testPrint("175 1 2", 21,8,175);
        testPrint("176 1 2", 21,8,176);

        testPrint("177 2 2", 21,8,177);


        testPrint("336 21 2", 21,8,336);

        testPrint("337 1 3", 21,8,337);
        testPrint("338 1 3", 21,8,338);

        testPrint("339 1 3", 21,8,339);
        testPrint("340 1 3", 21,8,340);

        testPrint("341 1 3", 21,8,341);


        // реализация, случайные значения, другие особые значения




        //endregion

        //region подьезд не изменяетья, изменяеться этаж

        testPrint("Incorrect data", 21,8,0);
        testPrint("1 1 1", 21,8,1);
        testPrint("9 2 1", 21,8,9);

        testPrint("115 15 1", 21,8,115);
        testPrint("121 16 1", 21,8,121);

        testPrint("127 16 1", 21,8,127);

        testPrint("Incorrect data", 21,8,-1);
        testPrint("2 1 1", 21,8,2);
        testPrint("8 1 1", 21,8,8);

        testPrint("116 15 1", 21,8,116);
        testPrint("122 16 1", 21,8,122);

        testPrint("128 16 1", 21,8,128);

        testPrint("2147483647 16 12782641", 21,8,2147483647);

        testPrint("115 15 1", 21,8,115);
        testPrint("121 16 1", 21,8,121);


        testPrint("2147483526 1 12782641", 21,8,2147483526);
        testPrint("2147483527 1 12782641", 21,8,2147483527);
        testPrint("2147483528 1 12782641", 21,8,2147483528);

        testPrint("2147483520 21 12782640", 21,8,2147483520);
        testPrint("2147483521 1 12782641", 21,8,2147483521);
        testPrint("2147483522 1 12782641", 21,8,2147483522);

        testPrint("2147483640 15 12782641", 21,8,2147483640);
        testPrint("2147483646 16 12782641", 21,8,2147483646);

        testPrint("2147483647 16 12782641", 21,8,2147483647);
        testPrint("Incorrect data", 21,8,2147483647 + 1);

        // предметная область

        testPrint("1135 16 7", 21,8,1135);
        testPrint("1136 16 7", 21,8,1136);
        testPrint("130 17 1", 21,8,130);

        testPrint("634 17 4", 21,8,634);
        testPrint("505 1 4", 21,8,505);

        testPrint("379 6 3", 21,8,379);

        // реализация, случайные значения, другие особые значения

        testPrint("754 11 5", 21,8,754);
        testPrint("8313 11 50", 21,8,8313);
        testPrint("6929 6 42", 21,8,6929);

        testPrint("70433 6 420", 21,8,70433);
        testPrint("334529 6 1992", 21,8,334529);
        testPrint("277199 21 1650", 21,8,277199);

        testPrint("1241397987 16 7389274", 21,8,1241397987);
        //endregion

    }

    @Test
    public void test50_50() {

        testPrint("Incorrect data", 50,50,0);
        testPrint("1 1 1", 50,50,1);
        testPrint("2 1 1", 50,50,2);


        testPrint("2147483646 23 858994", 50,50,2147483646);
        testPrint("2147483647 23 858994", 50,50,2147483647);
        testPrint("Incorrect data", 50,50,2147483647 + 1);

        //region одинаковые значение этажа и подьезда

        testPrint("Incorrect data", 50,50,0);
        testPrint("1 1 1", 50,50,1);
        testPrint("2 1 1", 50,50,2);

        testPrint("61249 25 25", 50,50,61249);
        testPrint("61250 25 25", 50,50,61250);
        testPrint("61251 26 25", 50,50,61251);


        testPrint("124999 50 50", 50,50,124999);
        testPrint("125000 50 50", 50,50,125000);
        testPrint("125001 1 51", 50,50,125001);

        //endregion

        //region разрывы между этажами

        testPrint("50 1 1", 50,50,50);
        testPrint("51 2 1", 50,50,51);
        testPrint("52 2 1", 50,50, 52);

        testPrint("2147483600 22 858994", 50,50,2147483600);
        testPrint("2147483601 23 858994", 50,50,2147483601);
        testPrint("2147483602 23 858994", 50,50, 2147483602);

        // предметная область, реализация, случайные значения, особые значения
        testPrint("1073741800 36 429497", 50,50,1073741800);
        testPrint("1073741801 37 429497", 50,50,1073741801);
        testPrint("1073741802 37 429497", 50,50,1073741802);

        //endregion

        //region разрывы между подьездами

        testPrint("25000 50 10", 50,50,25000);
        testPrint("25001 1 11", 50,50,25001);
        testPrint("25002 1 11", 50,50,25002);

        // предметная область реализация, случайные значения, другие особые значения
        testPrint("555000 50 222", 50,50,555000);
        testPrint("555001 1 223", 50,50,555001);
        testPrint("555002 1 223", 50,50,555002);

        testPrint("2147482500 50 858993", 50,50,2147482500);
        testPrint("2147482501 1 858994", 50,50,2147482501);
        testPrint("2147482502 1 858994", 50,50,2147482502);

        //endregion

        //region этаж не изменяеться, изменяеться подьезд

        testPrint("2500 50 1", 50,50,2500);
        testPrint("2501 1 2", 50,50,2501);

        testPrint("2550 1 2", 50,50,2550);
        testPrint("2551 2 2", 50,50,2551);

        testPrint("250000 50 100", 50,50,250000);


        testPrint("2147482500 50 858993", 50,50,2147482500);
        testPrint("2147482501 1 858994", 50,50,2147482501);

        testPrint("2147482550 1 858994", 50,50,2147482550);
        testPrint("2147482551 2 858994", 50,50,2147482551);


        //endregion

    }
    @Test
    public void test128_1024() {
        testPrint("Incorrect data", 128,1024,0);
        testPrint("1 1 1", 128,1024,1);
        testPrint("1 1 1", 128,1024,1);

        testPrint("2147483647 128 16384", 128,1024,2147483647);
        testPrint("2147483647 128 16384", 128,1024,2147483647);
        testPrint("Incorrect data", 128,1024,2147483647 + 1);



        //region одинаковые значение этажа и подьезда, разрывы между подьездами, этаж не изменяеться, изменяеться подьезд

        testPrint("Incorrect data", 128,1024,0);
        testPrint("1 1 1", 128,1024,1);
        testPrint("2 1 1", 128,1024,2);
        testPrint("1023 1 1", 128,1024,1023);
        testPrint("1024 1 1", 128,1024,1024);
        testPrint("1025 2 1", 128,1024,1025);

        testPrint("132096 1 2", 128,1024,132096);
        testPrint("132097 2 2", 128,1024,132097);
        testPrint("132098 2 2", 128,1024,132098);
        testPrint("133119 2 2", 128,1024,133119);
        testPrint("133120 2 2", 128,1024,133120);
        testPrint("133121 3 2", 128,1024,133121);


        testPrint("6472704 49 50", 128,1024,6472704);
        testPrint("6472705 50 50", 128,1024,6472705);
        testPrint("6472706 50 50", 128,1024,6472706);
        testPrint("6473727 50 50", 128,1024,6473727);
        testPrint("6473728 50 50", 128,1024,6473728);
        testPrint("6473729 51 50", 128,1024,6473729);
        testPrint("6473729 51 50", 128,1024,6473729);


        testPrint("16776192 127 128", 128,1024,16776192);
        testPrint("16776193 128 128", 128,1024,16776193);
        testPrint("16776194 128 128", 128,1024,16776194);
        testPrint("16777215 128 128", 128,1024,16777215);
        testPrint("16777216 128 128", 128,1024,16777216);
        testPrint("16777217 1 129", 128,1024,16777217);


        //endregion

        //region разрывы между этажами

        testPrint("1023 1 1", 128,1024,1023);
        testPrint("1024 1 1", 128,1024,1024);
        testPrint("1025 2 1", 128,1024,1025);
        testPrint("1026 2 1", 128,1024,1026);

        // предметная область, реализация, случайные значения, особые значения
        testPrint("136191 5 2", 128,1024,136191);
        testPrint("136192 5 2", 128,1024,136192);
        testPrint("136193 6 2", 128,1024,136193);
        testPrint("136194 6 2", 128,1024,136194);

        testPrint("2147482623 127 16384", 128,1024,2147482623);
        testPrint("2147482624 127 16384", 128,1024,2147482624);
        testPrint("2147482625 128 16384", 128,1024,2147482625);
        testPrint("2147482626 128 16384", 128,1024,2147482626);

        //endregion

        testPrint("2147483647 128 16384", 128,1024,2147483647);
        testPrint("2147483647 128 16384", 128,1024,2147483647);
        testPrint("Incorrect data", 128,1024,2147483647 + 1);



    }
    @Test
    public void test1024_64() {
        testPrint("Incorrect data", 1024,64,0);
        testPrint("1 1 1", 1024,64,1);
        testPrint("2 1 1", 1024,64,2);


        //region одинаковые значение этажа и подьезда, разрывы между подьездами, этаж не изменяеться, изменяеться подьезд

        testPrint("Incorrect data", 1024,64,0);
        testPrint("1 1 1", 1024,64,1);
        testPrint("2 1 1", 1024,64,2);

        testPrint("63 1 1", 1024,64,63);
        testPrint("64 1 1", 1024,64,64);

        testPrint("65 2 1", 1024,64,65);


        testPrint("65600 1 2", 1024,64,65600);

        testPrint("65601 2 2", 1024,64,65601);
        testPrint("65602 2 2", 1024,64,65602);

        testPrint("65663 2 2", 1024,64,65663);
        testPrint("65664 2 2", 1024,64,65664);

        testPrint("65665 3 2", 1024,64,65665);


        testPrint("4132799 63 64", 1024,64,4132799);

        testPrint("4132800 63 64", 1024,64,4132800);
        testPrint("4132801 64 64", 1024,64,4132801);

        testPrint("4132802 64 64", 1024,64,4132802);
        testPrint("4132864 64 64", 1024,64,4132864);

        testPrint("4132865 65 64", 1024,64,4132865);


        testPrint("4132799 63 64", 1024,64,4132799);

        testPrint("4132800 63 64", 1024,64,4132800);
        testPrint("4132801 64 64", 1024,64,4132801);

        testPrint("4132802 64 64", 1024,64,4132802);
        testPrint("4132864 64 64", 1024,64,4132864);

        testPrint("4132865 65 64", 1024,64,4132865);


        //endregion

        //region разрывы между этажами

        testPrint("63 1 1", 1024,64,63);
        testPrint("64 1 1", 1024,64,64);
        testPrint("65 2 1", 1024,64,65);
        testPrint("66 2 1", 1024,64,66);

        testPrint("192 3 1", 1024,64,192);
        testPrint("192 3 1", 1024,64,192);
        testPrint("193 4 1", 1024,64,193);
        testPrint("194 4 1", 1024,64,194);




        testPrint("2147483519 1022 32768", 1024,64,2147483519);
        testPrint("2147483520 1022 32768", 1024,64,2147483520);
        testPrint("2147483521 1023 32768", 1024,64,2147483521);
        testPrint("2147483522 1023 32768", 1024,64,2147483522);

        testPrint("2147483583 1023 32768", 1024,64,2147483583);
        testPrint("2147483584 1023 32768", 1024,64,2147483584);
        testPrint("2147483585 1024 32768", 1024,64,2147483585);
        testPrint("2147483586 1024 32768", 1024,64,2147483586);

        //endregion


        testPrint("2147483646 1024 32768", 1024,64,2147483646);
        testPrint("2147483647 1024 32768", 1024,64,2147483647);
        testPrint("Incorrect data", 1024,64,2147483647 + 1);

    }
    @Test
    public void test33333_666() {
        testPrint("Incorrect data", 3333,666,0);
        testPrint("1 1 1", 3333,666,1);
        testPrint("2 1 1", 3333,666,2);


        //region одинаковые значение этажа и подьезда, разрывы между подьездами, этаж не изменяеться, изменяеться подьезд

        testPrint("Incorrect data", 3333,666,0);
        testPrint("1 1 1", 3333,666,1);
        testPrint("2 1 1", 3333,666,2);

        testPrint("665 1 1", 3333,666,665);
        testPrint("666 1 1", 3333,666,666);

        testPrint("667 2 1", 3333,666,667);

        testPrint("2220443 1 2", 3333,666,2220443);
        testPrint("2220444 1 2", 3333,666,2220444);
        testPrint("2220445 2 2", 3333,666,2220445);

        testPrint("2221110 2 2", 3333,666,2221110);
        testPrint("2221111 3 2", 3333,666,2221111);
        testPrint("2221112 3 2", 3333,666,2221112);

        testPrint("139887971 63 64", 3333,666,139887971);
        testPrint("139887972 63 64", 3333,666,139887972);
        testPrint("139887973 64 64", 3333,666,139887973);
        testPrint("139887974 64 64", 3333,666,139887974);

        testPrint("139888637 64 64", 3333,666,139888637);
        testPrint("139888638 64 64", 3333,666,139888638);
        testPrint("139888639 65 64", 3333,666,139888639);
        testPrint("139888640 65 64", 3333,666,139888640);



        testPrint("2142728460 965 966", 3333,666,2142728460);
        testPrint("2142728461 966 966", 3333,666,2142728461);
        testPrint("2142728462 966 966", 3333,666,2142728462);

        testPrint("2144948903 966 967", 3333,666,2144948903);
        testPrint("2144948904 966 967", 3333,666,2144948904);
        testPrint("2144948905 967 967", 3333,666,2144948905);

        testPrint("2144949569 967 967", 3333,666,2144949569);
        testPrint("2144949570 967 967", 3333,666,2144949570);

        testPrint("2144949571 968 967", 3333,666,2144949571);
        testPrint("2144949572 968 967", 3333,666,2144949572);

        testPrint("2147483646 1439 968", 3333,666,2147483646);
        testPrint("2147483647 1439 968", 3333,666,2147483647);
        testPrint("Incorrect data", 3333,666,2147483647 + 1);

        //endregion

        //region разрывы между подьездами
        testPrint("2219777 3333 1", 3333,666,2219777);
        testPrint("2219778 3333 1", 3333,666,2219778);
        testPrint("2219779 1 2", 3333,666,2219779);
        testPrint("2219780 1 2", 3333,666,2219780);


        testPrint("219758021 3333 99", 3333,666,219758021);
        testPrint("219758022 3333 99", 3333,666,219758022);
        testPrint("219758023 1 100", 3333,666,219758023);
        testPrint("219758024 1 100", 3333,666,219758024);


        testPrint("2144305547 3333 966", 3333,666,2144305547);
        testPrint("2144305548 3333 966", 3333,666,2144305548);
        testPrint("2144305549 1 967", 3333,666,2144305549);
        testPrint("2144305550 1 967", 3333,666,2144305550);

        testPrint("2146525325 3333 967", 3333,666,2146525325);
        testPrint("2146525326 3333 967", 3333,666,2146525326);
        testPrint("2146525327 1 968", 3333,666,2146525327);
        testPrint("2146525328 1 968", 3333,666,2146525328);
        //endregion

        testPrint("2147483034 1438 968", 3333,666,2147483034);

        testPrint("2147483646 1439 968", 3333,666,2147483646);
        testPrint("2147483647 1439 968", 3333,666,2147483647);
        testPrint("Incorrect data", 3333,666,2147483647 + 1);

    }
    @Test
    public void test342_647() {
        testPrint("Incorrect data", 342,647,0);
        testPrint("1 1 1", 342,647,1);
        testPrint("2 1 1", 342,647,2);

        //region одинаковые значение этажа и подьезда, разрывы между подьездами, этаж не изменяеться, изменяеться подьезд, разрывы между подьездами

        testPrint("646 1 1", 342,647,646);
        testPrint("647 1 1", 342,647,647);
        testPrint("648 2 1", 342,647,648);
        testPrint("649 2 1", 342,647,649);


        testPrint("221921 1 2", 342,647,221921);
        testPrint("221922 2 2", 342,647,221922);
        testPrint("221923 2 2", 342,647,221923);

        testPrint("222567 2 2", 342,647,222567);
        testPrint("222568 2 2", 342,647,222568);
        testPrint("222569 3 2", 342,647,222569);

        testPrint("222570 3 2", 342,647,222570);


        testPrint("75675060 341 342", 342,647,75675060);
        testPrint("75675061 341 342", 342,647,75675061);

        testPrint("75675062 342 342", 342,647,75675062);
        testPrint("75675063 342 342", 342,647,75675063);

        testPrint("75675707 342 342", 342,647,75675707);
        testPrint("75675708 342 342", 342,647,75675708);

        testPrint("75675709 1 343", 342,647,75675709);
        testPrint("75675710 1 343", 342,647,75675710);


        testPrint("75675060 341 342", 342,647,75675060);
        testPrint("75675061 341 342", 342,647,75675061);

        testPrint("75675062 342 342", 342,647,75675062);
        testPrint("75675063 342 342", 342,647,75675063);

        testPrint("75675707 342 342", 342,647,75675707);
        testPrint("75675708 342 342", 342,647,75675708);

        testPrint("75675709 1 343", 342,647,75675709);
        testPrint("75675710 1 343", 342,647,75675710);



        testPrint("2147482932 29 9706", 342,647,2147482932);
        testPrint("2147482933 29 9706", 342,647,2147482933);
        testPrint("2147482934 30 9706", 342,647,2147482934);
        testPrint("2147482935 30 9706", 342,647,2147482935);

        testPrint("2147483579 30 9706", 342,647,2147483579);
        testPrint("2147483580 30 9706", 342,647,2147483580);
        testPrint("2147483581 31 9706", 342,647,2147483581);
        testPrint("2147483582 31 9706", 342,647,2147483582);
        //endregion


        testPrint("2147483646 31 9706", 342,647,2147483646);
        testPrint("2147483647 31 9706", 342,647,2147483647);
        testPrint("Incorrect data", 342,647,2147483647 + 1);



    }
    @Test
    public void test981_100() {
        testPrint("Incorrect data", 981,100,0);
        testPrint("1 1 1", 981,100,1);
        testPrint("2 1 1", 981,100,2);


        //region одинаковые значение этажа и подьезда, разрывы между подьездами, этаж не изменяеться, изменяеться подьезд, разрывы между подьездами
        testPrint("Incorrect data", 981,100,0);
        testPrint("1 1 1", 981,100,1);
        testPrint("2 1 1", 981,100,2);

        testPrint("99 1 1", 981,100,99);
        testPrint("100 1 1", 981,100,100);
        testPrint("101 2 1", 981,100,101);


        testPrint("1 1 1", 981,100,1);
        testPrint("2 1 1", 981,100,2);

        testPrint("98199 1 2", 981,100,98199);
        testPrint("98200 1 2", 981,100,98200);
        testPrint("98201 2 2", 981,100,98201);

        testPrint("98299 2 2", 981,100,98299);
        testPrint("98300 2 2", 981,100,98300);
        testPrint("98301 3 2", 981,100,98301);


        testPrint("96137800 979 980", 981,100,96137800);
        testPrint("96137801 980 980", 981,100,96137801);
        testPrint("96137802 980 980", 981,100,96137802);

        testPrint("96137899 980 980", 981,100,96137899);
        testPrint("96137900 980 980", 981,100,96137900);
        testPrint("96137901 981 980", 981,100,96137901);
        testPrint("96137902 981 980", 981,100,96137902);

        testPrint("96235998 980 981", 981,100,96235998);
        testPrint("96235999 980 981", 981,100,96235999);
        testPrint("96236000 980 981", 981,100,96236000);
        testPrint("96236001 981 981", 981,100,96236001);

        testPrint("96236099 981 981", 981,100,96236099);
        testPrint("96236100 981 981", 981,100,96236100);
        testPrint("96236101 1 982", 981,100,96236101);
        testPrint("96236102 1 982", 981,100,96236102);
        //endregion

        testPrint("2147483646 747 21891", 981,100,2147483646);
        testPrint("2147483647 747 21891", 981,100,2147483647);
        testPrint("Incorrect data", 981,100,2147483647 + 1);


    }
    @Test
    public void test78791_78() {
        testPrint("Incorrect data", 78791,78,0);
        testPrint("1 1 1", 78791,78,1);
        testPrint("2 1 1", 78791,78,2);


        //region одинаковые значение этажа и подьезда, разрывы между подьездами, этаж не изменяеться, изменяеться подьезд, разрывы между подьездами
        testPrint("1 1 1", 78791,78,1);
        testPrint("2 1 1", 78791,78,2);

        testPrint("77 1 1", 78791,78,77);
        testPrint("78 1 1", 78791,78,78);

        testPrint("6145776 1 2", 78791,78, 6145776);
        testPrint("6145777 2 2", 78791,78,6145777);
        testPrint("6145778 2 2", 78791,78,6145778);

        testPrint("6145853 2 2", 78791,78,6145853);
        testPrint("6145854 2 2", 78791,78,6145854);
        testPrint("6145855 3 2", 78791,78,6145855);

        testPrint("67603535 11 12", 78791,78,67603535);
        testPrint("67603536 11 12", 78791,78,67603536);
        testPrint("67603537 12 12", 78791,78,67603537);
        testPrint("67603538 12 12", 78791,78,67603538);

        testPrint("67603613 12 12", 78791,78,67603613);
        testPrint("67603614 12 12", 78791,78,67603614);

        testPrint("67603615 13 12", 78791,78,67603615);
        testPrint("67603616 13 12", 78791,78,67603616);

        testPrint("2138730048 348 349", 78791,78,2138730048);
        testPrint("2138730049 349 349", 78791,78,2138730049);
        testPrint("2138730050 349 349", 78791,78,2138730050);

        testPrint("2138730125 349 349", 78791,78,2138730125);
        testPrint("2138730126 349 349", 78791,78,2138730126);
        testPrint("2138730127 350 349", 78791,78,2138730127);

        testPrint("2144848601 78791 349", 78791,78, 2144848601);
        testPrint("2144848602 78791 349", 78791,78, 2144848602);
        testPrint("2144848603 1 350", 78791,78,2144848603);
        testPrint("2144848604 1 350", 78791,78,2144848604);

        testPrint("2144848679 1 350", 78791,78,2144848679);
        testPrint("2144848680 1 350", 78791,78,2144848680);
        testPrint("2144848681 2 350", 78791,78,2144848681);
        testPrint("2144848682 2 350", 78791,78,2144848682);


        testPrint("2147483597 33782 350", 78791,78,2147483597);
        testPrint("2147483598 33782 350", 78791,78,2147483598);
        testPrint("2147483599 33783 350", 78791,78,2147483599);
        testPrint("2147483600 33783 350", 78791,78,2147483600);


        //endregion

        testPrint("2147483646 33783 350", 78791,78,2147483646);
        testPrint("2147483647 33783 350", 78791,78,2147483647);
        testPrint("Incorrect data", 78791,78,2147483647 + 1);




    }
    @Test
    public void test18088_1901() {
        testPrint("Incorrect data", 18088,1901,0);
        testPrint("1 1 1", 18088,1901,1);
        testPrint("2 1 1", 18088,1901,2);

        testPrint("1900 1 1", 18088,1901,1900);
        testPrint("1901 1 1", 18088,1901,1901);
        testPrint("1902 2 1", 18088,1901,1902);
        testPrint("1903 2 1", 18088,1901,1903);

        testPrint("34387188 1 2", 18088,1901,34387188);
        testPrint("34387189 1 2", 18088,1901,34387189);

        testPrint("34387190 2 2", 18088,1901,34387190);
        testPrint("34387191 2 2", 18088,1901,34387191);

        testPrint("34389090 2 2", 18088,1901,34389090);
        testPrint("34389091 3 2", 18088,1901,34389091);

        testPrint("343871889 10 11", 18088,1901,343871889);
        testPrint("343871890 10 11", 18088,1901,343871890);
        testPrint("343871891 11 11", 18088,1901,343871891);
        testPrint("343871892 11 11", 18088,1901,343871892);

        testPrint("343873790 11 11", 18088,1901,343873790);
        testPrint("343873791 11 11", 18088,1901,343873791);
        testPrint("343873792 12 11", 18088,1901,343873792);
        testPrint("343873793 12 11", 18088,1901,343873793);



        testPrint("1547337959 18088 45", 18088,1901,1547337959);
        testPrint("1547337960 18088 45", 18088,1901,1547337960);
        testPrint("1547337961 1 46", 18088,1901,1547337961);
        testPrint("1547337962 1 46", 18088,1901,1547337962);
        testPrint("1547337963 1 46", 18088,1901,1547337963);

        testPrint("2097618529 61 62", 18088,1901,2097618529);
        testPrint("2097618530 62 62", 18088,1901,2097618530);
        testPrint("2097618531 62 62", 18088,1901,2097618531);

        testPrint("2097620429 62 62", 18088,1901,2097620429);
        testPrint("2097620430 62 62", 18088,1901,2097620430);

        testPrint("2097620431 63 62", 18088,1901,2097620431);
        testPrint("2097620432 63 62", 18088,1901,2097620432);


        testPrint("2131887855 18088 62", 18088,1901,2131887855);
        testPrint("2131887856 18088 62", 18088,1901,2131887856);
        testPrint("2131887857 1 63", 18088,1901,2131887857);
        testPrint("2131887858 1 63", 18088,1901,2131887858);

        testPrint("2147483646 8204 63", 18088,1901,2147483646);
        testPrint("2147483647 8204 63", 18088,1901,2147483647);
        testPrint("Incorrect data", 18088,1901,2147483647 + 1);


    }
    @Test
    public void test44389_36554() {
        testPrint("Incorrect data", 44389,36554,0);
        testPrint("1 1 1", 44389,36554,1);
        testPrint("2 1 1", 44389,36554,2);

        //region одинаковые значение этажа и подьезда, разрывы между подьездами, этаж не изменяеться, изменяеться подьезд, разрывы между подьездами
        testPrint("36553 1 1", 44389,36554,36553);
        testPrint("36554 1 1", 44389,36554,36554);

        testPrint("36556 2 1", 44389,36554,36556);
        testPrint("36557 2 1", 44389,36554,36557);

        testPrint("1622632059 1 2", 44389,36554,1622632059);
        testPrint("1622632060 1 2", 44389,36554,1622632060);
        testPrint("1622632061 2 2", 44389,36554,1622632061);
        testPrint("1622632062 2 2", 44389,36554,1622632062);

        testPrint("1622668613 2 2", 44389,36554,1622668613);
        testPrint("1622668614 2 2", 44389,36554,1622668614);
        testPrint("1622668615 3 2", 44389,36554,1622668615);
        testPrint("1622668616 3 2", 44389,36554,1622668616);

        testPrint("36503445 999 1", 44389,36554,36503445);
        testPrint("36503446 999 1", 44389,36554,36503446);
        testPrint("36503447 999 1", 44389,36554,36503447);
        testPrint("36503448 999 1", 44389,36554,36503448);


        testPrint("18276999 500 1", 44389,36554,18276999);
        testPrint("18277000 500 1", 44389,36554,18277000);
        testPrint("18277001 501 1", 44389,36554,18277001);
        testPrint("18277002 501 1", 44389,36554,18277002);


        testPrint("53368839 1460 1", 44389,36554,53368839);
        testPrint("53368840 1460 1", 44389,36554,53368840);
        testPrint("53368841 1461 1", 44389,36554,53368841);
        testPrint("53368842 1461 1", 44389,36554,53368842);

        testPrint("1675964345 1460 2", 44389,36554,1675964345);
        testPrint("1675964346 1460 2", 44389,36554,1675964346);
        testPrint("1675964347 1461 2", 44389,36554,1675964347);
        testPrint("1675964348 1461 2", 44389,36554,1675964348);

        testPrint("2147437837 14358 2", 44389,36554,2147437837);
        testPrint("2147437838 14358 2", 44389,36554,2147437838);
        testPrint("2147437839 14359 2", 44389,36554,2147437839);
        testPrint("2147437840 14359 2", 44389,36554,2147437840);


        testPrint("2147437878 14359 2", 44389,36554,2147437878);
        testPrint("2147472177 14359 2", 44389,36554,2147472177);

        testPrint("2147474391 14359 2", 44389,36554,2147474391);
        testPrint("2147474392 14359 2", 44389,36554,2147474392);
        testPrint("2147474393 14360 2", 44389,36554,2147474393);
        testPrint("2147474393 14360 2", 44389,36554,2147474393);

        testPrint("2147474747 14360 2", 44389,36554,2147474747);
        testPrint("2147474721 14360 2", 44389,36554,2147474721);


        testPrint("2147483646 14360 2", 44389,36554,2147483646);
        testPrint("2147483647 14360 2", 44389,36554,2147483647);
        testPrint("Incorrect data", 44389,36554,2147483647 + 1);

    }
    @Test
    public void test2390_30490() {
        testPrint("Incorrect data", 2390,30490,0);
        testPrint("1 1 1", 2390,30490,1);
        testPrint("2 1 1", 2390,30490,2);

        //region одинаковые значение этажа и подьезда, разрывы между подьездами, этаж не изменяеться, изменяеться подьезд, разрывы между подьездами

        testPrint("30489 1 1", 2390,30490,30489);
        testPrint("30490 1 1", 2390,30490,30490);
        testPrint("30491 2 1", 2390,30490,30491);
        testPrint("30492 2 1", 2390,30490,30492);

        testPrint("72810119 2388 1", 2390,30490,72810119);
        testPrint("72810120 2388 1", 2390,30490,72810120);
        testPrint("72810121 2389 1", 2390,30490,72810121);
        testPrint("72810122 2389 1", 2390,30490,72810122);

        testPrint("72840609 2389 1", 2390,30490,72840609);
        testPrint("72840610 2389 1", 2390,30490,72840610);
        testPrint("72840611 2390 1", 2390,30490,72840611);
        testPrint("72840612 2390 1", 2390,30490,72840612);

        testPrint("72871099 2390 1", 2390,30490,72871099);
        testPrint("72871100 2390 1", 2390,30490,72871100);
        testPrint("72871101 1 2", 2390,30490,72871101);
        testPrint("72871102 1 2", 2390,30490,72871102);

        testPrint("1239327029 17 18", 2390,30490,1239327029);
        testPrint("1239327030 17 18", 2390,30490,1239327030);
        testPrint("1239327031 18 18", 2390,30490,1239327031);
        testPrint("1239327032 18 18", 2390,30490,1239327032);

        testPrint("1239357519 18 18", 2390,30490,1239357519);
        testPrint("1239357520 18 18", 2390,30490,1239357520);
        testPrint("1239357521 19 18", 2390,30490,1239357521);
        testPrint("1239357522 19 18", 2390,30490,1239357522);


        testPrint("1968373419 28 28", 2390,30490,1968373419);
        testPrint("1968373420 28 28", 2390,30490,1968373420);
        testPrint("1968373421 29 28", 2390,30490,1968373421);
        testPrint("1968373422 29 28", 2390,30490,1968373422);


        testPrint("2041244519 28 29", 2390,30490,2041244519);
        testPrint("2041244520 28 29", 2390,30490,2041244520);
        testPrint("2041244521 29 29", 2390,30490,2041244521);
        testPrint("2041244522 29 29", 2390,30490,2041244522);


        testPrint("2041275009 29 29", 2390,30490,2041275009);
        testPrint("2041275010 29 29", 2390,30490,2041275010);
        testPrint("2041275011 30 29", 2390,30490,2041275011);
        testPrint("2041275012 30 29", 2390,30490,2041275012);


        testPrint("2113231409 2389 29", 2390,30490,2113231409);
        testPrint("2113231410 2389 29", 2390,30490,2113231410);
        testPrint("2113231411 2390 29", 2390,30490,2113231411);
        testPrint("2113231412 2390 29", 2390,30490,2113231412);

        testPrint("2113261899 2390 29", 2390,30490,2113261899);
        testPrint("2113261900 2390 29", 2390,30490,2113261900);
        testPrint("2113261901 1 30", 2390,30490,2113261901);
        testPrint("2113261902 1 30", 2390,30490,2113261902);

        testPrint("2147483646 1123 30", 2390,30490,2147483646);
        testPrint("2147483647 1123 30", 2390,30490,2147483647);
        testPrint("Incorrect data", 2390,30490,2147483647 + 1);

    }

}